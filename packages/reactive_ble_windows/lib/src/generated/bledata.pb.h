// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bledata.proto

#ifndef PROTOBUF_INCLUDED_bledata_2eproto
#define PROTOBUF_INCLUDED_bledata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_bledata_2eproto 

namespace protobuf_bledata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[28];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_bledata_2eproto
class BleStatusInfo;
class BleStatusInfoDefaultTypeInternal;
extern BleStatusInfoDefaultTypeInternal _BleStatusInfo_default_instance_;
class ChangeConnectionPriorityInfo;
class ChangeConnectionPriorityInfoDefaultTypeInternal;
extern ChangeConnectionPriorityInfoDefaultTypeInternal _ChangeConnectionPriorityInfo_default_instance_;
class ChangeConnectionPriorityRequest;
class ChangeConnectionPriorityRequestDefaultTypeInternal;
extern ChangeConnectionPriorityRequestDefaultTypeInternal _ChangeConnectionPriorityRequest_default_instance_;
class CharacteristicAddress;
class CharacteristicAddressDefaultTypeInternal;
extern CharacteristicAddressDefaultTypeInternal _CharacteristicAddress_default_instance_;
class CharacteristicValueInfo;
class CharacteristicValueInfoDefaultTypeInternal;
extern CharacteristicValueInfoDefaultTypeInternal _CharacteristicValueInfo_default_instance_;
class ClearGattCacheInfo;
class ClearGattCacheInfoDefaultTypeInternal;
extern ClearGattCacheInfoDefaultTypeInternal _ClearGattCacheInfo_default_instance_;
class ClearGattCacheRequest;
class ClearGattCacheRequestDefaultTypeInternal;
extern ClearGattCacheRequestDefaultTypeInternal _ClearGattCacheRequest_default_instance_;
class ConnectToDeviceRequest;
class ConnectToDeviceRequestDefaultTypeInternal;
extern ConnectToDeviceRequestDefaultTypeInternal _ConnectToDeviceRequest_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class DeviceScanInfo;
class DeviceScanInfoDefaultTypeInternal;
extern DeviceScanInfoDefaultTypeInternal _DeviceScanInfo_default_instance_;
class DisconnectFromDeviceRequest;
class DisconnectFromDeviceRequestDefaultTypeInternal;
extern DisconnectFromDeviceRequestDefaultTypeInternal _DisconnectFromDeviceRequest_default_instance_;
class DiscoverServicesInfo;
class DiscoverServicesInfoDefaultTypeInternal;
extern DiscoverServicesInfoDefaultTypeInternal _DiscoverServicesInfo_default_instance_;
class DiscoverServicesRequest;
class DiscoverServicesRequestDefaultTypeInternal;
extern DiscoverServicesRequestDefaultTypeInternal _DiscoverServicesRequest_default_instance_;
class DiscoveredCharacteristic;
class DiscoveredCharacteristicDefaultTypeInternal;
extern DiscoveredCharacteristicDefaultTypeInternal _DiscoveredCharacteristic_default_instance_;
class DiscoveredService;
class DiscoveredServiceDefaultTypeInternal;
extern DiscoveredServiceDefaultTypeInternal _DiscoveredService_default_instance_;
class GenericFailure;
class GenericFailureDefaultTypeInternal;
extern GenericFailureDefaultTypeInternal _GenericFailure_default_instance_;
class NegotiateMtuInfo;
class NegotiateMtuInfoDefaultTypeInternal;
extern NegotiateMtuInfoDefaultTypeInternal _NegotiateMtuInfo_default_instance_;
class NegotiateMtuRequest;
class NegotiateMtuRequestDefaultTypeInternal;
extern NegotiateMtuRequestDefaultTypeInternal _NegotiateMtuRequest_default_instance_;
class NotifyCharacteristicRequest;
class NotifyCharacteristicRequestDefaultTypeInternal;
extern NotifyCharacteristicRequestDefaultTypeInternal _NotifyCharacteristicRequest_default_instance_;
class NotifyNoMoreCharacteristicRequest;
class NotifyNoMoreCharacteristicRequestDefaultTypeInternal;
extern NotifyNoMoreCharacteristicRequestDefaultTypeInternal _NotifyNoMoreCharacteristicRequest_default_instance_;
class ReadCharacteristicRequest;
class ReadCharacteristicRequestDefaultTypeInternal;
extern ReadCharacteristicRequestDefaultTypeInternal _ReadCharacteristicRequest_default_instance_;
class ScanForDevicesRequest;
class ScanForDevicesRequestDefaultTypeInternal;
extern ScanForDevicesRequestDefaultTypeInternal _ScanForDevicesRequest_default_instance_;
class ServiceDataEntry;
class ServiceDataEntryDefaultTypeInternal;
extern ServiceDataEntryDefaultTypeInternal _ServiceDataEntry_default_instance_;
class ServiceWithCharacteristics;
class ServiceWithCharacteristicsDefaultTypeInternal;
extern ServiceWithCharacteristicsDefaultTypeInternal _ServiceWithCharacteristics_default_instance_;
class ServicesWithCharacteristics;
class ServicesWithCharacteristicsDefaultTypeInternal;
extern ServicesWithCharacteristicsDefaultTypeInternal _ServicesWithCharacteristics_default_instance_;
class Uuid;
class UuidDefaultTypeInternal;
extern UuidDefaultTypeInternal _Uuid_default_instance_;
class WriteCharacteristicInfo;
class WriteCharacteristicInfoDefaultTypeInternal;
extern WriteCharacteristicInfoDefaultTypeInternal _WriteCharacteristicInfo_default_instance_;
class WriteCharacteristicRequest;
class WriteCharacteristicRequestDefaultTypeInternal;
extern WriteCharacteristicRequestDefaultTypeInternal _WriteCharacteristicRequest_default_instance_;
namespace google {
namespace protobuf {
template<> ::BleStatusInfo* Arena::CreateMaybeMessage<::BleStatusInfo>(Arena*);
template<> ::ChangeConnectionPriorityInfo* Arena::CreateMaybeMessage<::ChangeConnectionPriorityInfo>(Arena*);
template<> ::ChangeConnectionPriorityRequest* Arena::CreateMaybeMessage<::ChangeConnectionPriorityRequest>(Arena*);
template<> ::CharacteristicAddress* Arena::CreateMaybeMessage<::CharacteristicAddress>(Arena*);
template<> ::CharacteristicValueInfo* Arena::CreateMaybeMessage<::CharacteristicValueInfo>(Arena*);
template<> ::ClearGattCacheInfo* Arena::CreateMaybeMessage<::ClearGattCacheInfo>(Arena*);
template<> ::ClearGattCacheRequest* Arena::CreateMaybeMessage<::ClearGattCacheRequest>(Arena*);
template<> ::ConnectToDeviceRequest* Arena::CreateMaybeMessage<::ConnectToDeviceRequest>(Arena*);
template<> ::DeviceInfo* Arena::CreateMaybeMessage<::DeviceInfo>(Arena*);
template<> ::DeviceScanInfo* Arena::CreateMaybeMessage<::DeviceScanInfo>(Arena*);
template<> ::DisconnectFromDeviceRequest* Arena::CreateMaybeMessage<::DisconnectFromDeviceRequest>(Arena*);
template<> ::DiscoverServicesInfo* Arena::CreateMaybeMessage<::DiscoverServicesInfo>(Arena*);
template<> ::DiscoverServicesRequest* Arena::CreateMaybeMessage<::DiscoverServicesRequest>(Arena*);
template<> ::DiscoveredCharacteristic* Arena::CreateMaybeMessage<::DiscoveredCharacteristic>(Arena*);
template<> ::DiscoveredService* Arena::CreateMaybeMessage<::DiscoveredService>(Arena*);
template<> ::GenericFailure* Arena::CreateMaybeMessage<::GenericFailure>(Arena*);
template<> ::NegotiateMtuInfo* Arena::CreateMaybeMessage<::NegotiateMtuInfo>(Arena*);
template<> ::NegotiateMtuRequest* Arena::CreateMaybeMessage<::NegotiateMtuRequest>(Arena*);
template<> ::NotifyCharacteristicRequest* Arena::CreateMaybeMessage<::NotifyCharacteristicRequest>(Arena*);
template<> ::NotifyNoMoreCharacteristicRequest* Arena::CreateMaybeMessage<::NotifyNoMoreCharacteristicRequest>(Arena*);
template<> ::ReadCharacteristicRequest* Arena::CreateMaybeMessage<::ReadCharacteristicRequest>(Arena*);
template<> ::ScanForDevicesRequest* Arena::CreateMaybeMessage<::ScanForDevicesRequest>(Arena*);
template<> ::ServiceDataEntry* Arena::CreateMaybeMessage<::ServiceDataEntry>(Arena*);
template<> ::ServiceWithCharacteristics* Arena::CreateMaybeMessage<::ServiceWithCharacteristics>(Arena*);
template<> ::ServicesWithCharacteristics* Arena::CreateMaybeMessage<::ServicesWithCharacteristics>(Arena*);
template<> ::Uuid* Arena::CreateMaybeMessage<::Uuid>(Arena*);
template<> ::WriteCharacteristicInfo* Arena::CreateMaybeMessage<::WriteCharacteristicInfo>(Arena*);
template<> ::WriteCharacteristicRequest* Arena::CreateMaybeMessage<::WriteCharacteristicRequest>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ScanForDevicesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ScanForDevicesRequest) */ {
 public:
  ScanForDevicesRequest();
  virtual ~ScanForDevicesRequest();

  ScanForDevicesRequest(const ScanForDevicesRequest& from);

  inline ScanForDevicesRequest& operator=(const ScanForDevicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanForDevicesRequest(ScanForDevicesRequest&& from) noexcept
    : ScanForDevicesRequest() {
    *this = ::std::move(from);
  }

  inline ScanForDevicesRequest& operator=(ScanForDevicesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanForDevicesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanForDevicesRequest* internal_default_instance() {
    return reinterpret_cast<const ScanForDevicesRequest*>(
               &_ScanForDevicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ScanForDevicesRequest* other);
  friend void swap(ScanForDevicesRequest& a, ScanForDevicesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanForDevicesRequest* New() const final {
    return CreateMaybeMessage<ScanForDevicesRequest>(NULL);
  }

  ScanForDevicesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScanForDevicesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScanForDevicesRequest& from);
  void MergeFrom(const ScanForDevicesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanForDevicesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Uuid serviceUuids = 1;
  int serviceuuids_size() const;
  void clear_serviceuuids();
  static const int kServiceUuidsFieldNumber = 1;
  ::Uuid* mutable_serviceuuids(int index);
  ::google::protobuf::RepeatedPtrField< ::Uuid >*
      mutable_serviceuuids();
  const ::Uuid& serviceuuids(int index) const;
  ::Uuid* add_serviceuuids();
  const ::google::protobuf::RepeatedPtrField< ::Uuid >&
      serviceuuids() const;

  // int32 scanMode = 2;
  void clear_scanmode();
  static const int kScanModeFieldNumber = 2;
  ::google::protobuf::int32 scanmode() const;
  void set_scanmode(::google::protobuf::int32 value);

  // bool requireLocationServicesEnabled = 3;
  void clear_requirelocationservicesenabled();
  static const int kRequireLocationServicesEnabledFieldNumber = 3;
  bool requirelocationservicesenabled() const;
  void set_requirelocationservicesenabled(bool value);

  // @@protoc_insertion_point(class_scope:ScanForDevicesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Uuid > serviceuuids_;
  ::google::protobuf::int32 scanmode_;
  bool requirelocationservicesenabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceScanInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeviceScanInfo) */ {
 public:
  DeviceScanInfo();
  virtual ~DeviceScanInfo();

  DeviceScanInfo(const DeviceScanInfo& from);

  inline DeviceScanInfo& operator=(const DeviceScanInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceScanInfo(DeviceScanInfo&& from) noexcept
    : DeviceScanInfo() {
    *this = ::std::move(from);
  }

  inline DeviceScanInfo& operator=(DeviceScanInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceScanInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceScanInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceScanInfo*>(
               &_DeviceScanInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DeviceScanInfo* other);
  friend void swap(DeviceScanInfo& a, DeviceScanInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceScanInfo* New() const final {
    return CreateMaybeMessage<DeviceScanInfo>(NULL);
  }

  DeviceScanInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceScanInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceScanInfo& from);
  void MergeFrom(const DeviceScanInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceScanInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServiceDataEntry serviceData = 4;
  int servicedata_size() const;
  void clear_servicedata();
  static const int kServiceDataFieldNumber = 4;
  ::ServiceDataEntry* mutable_servicedata(int index);
  ::google::protobuf::RepeatedPtrField< ::ServiceDataEntry >*
      mutable_servicedata();
  const ::ServiceDataEntry& servicedata(int index) const;
  ::ServiceDataEntry* add_servicedata();
  const ::google::protobuf::RepeatedPtrField< ::ServiceDataEntry >&
      servicedata() const;

  // repeated .Uuid serviceUuids = 7;
  int serviceuuids_size() const;
  void clear_serviceuuids();
  static const int kServiceUuidsFieldNumber = 7;
  ::Uuid* mutable_serviceuuids(int index);
  ::google::protobuf::RepeatedPtrField< ::Uuid >*
      mutable_serviceuuids();
  const ::Uuid& serviceuuids(int index) const;
  ::Uuid* add_serviceuuids();
  const ::google::protobuf::RepeatedPtrField< ::Uuid >&
      serviceuuids() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes manufacturerData = 6;
  void clear_manufacturerdata();
  static const int kManufacturerDataFieldNumber = 6;
  const ::std::string& manufacturerdata() const;
  void set_manufacturerdata(const ::std::string& value);
  #if LANG_CXX11
  void set_manufacturerdata(::std::string&& value);
  #endif
  void set_manufacturerdata(const char* value);
  void set_manufacturerdata(const void* value, size_t size);
  ::std::string* mutable_manufacturerdata();
  ::std::string* release_manufacturerdata();
  void set_allocated_manufacturerdata(::std::string* manufacturerdata);

  // .GenericFailure failure = 3;
  bool has_failure() const;
  void clear_failure();
  static const int kFailureFieldNumber = 3;
  private:
  const ::GenericFailure& _internal_failure() const;
  public:
  const ::GenericFailure& failure() const;
  ::GenericFailure* release_failure();
  ::GenericFailure* mutable_failure();
  void set_allocated_failure(::GenericFailure* failure);

  // int32 rssi = 5;
  void clear_rssi();
  static const int kRssiFieldNumber = 5;
  ::google::protobuf::int32 rssi() const;
  void set_rssi(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DeviceScanInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServiceDataEntry > servicedata_;
  ::google::protobuf::RepeatedPtrField< ::Uuid > serviceuuids_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr manufacturerdata_;
  ::GenericFailure* failure_;
  ::google::protobuf::int32 rssi_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectToDeviceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConnectToDeviceRequest) */ {
 public:
  ConnectToDeviceRequest();
  virtual ~ConnectToDeviceRequest();

  ConnectToDeviceRequest(const ConnectToDeviceRequest& from);

  inline ConnectToDeviceRequest& operator=(const ConnectToDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectToDeviceRequest(ConnectToDeviceRequest&& from) noexcept
    : ConnectToDeviceRequest() {
    *this = ::std::move(from);
  }

  inline ConnectToDeviceRequest& operator=(ConnectToDeviceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectToDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectToDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectToDeviceRequest*>(
               &_ConnectToDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ConnectToDeviceRequest* other);
  friend void swap(ConnectToDeviceRequest& a, ConnectToDeviceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectToDeviceRequest* New() const final {
    return CreateMaybeMessage<ConnectToDeviceRequest>(NULL);
  }

  ConnectToDeviceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectToDeviceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectToDeviceRequest& from);
  void MergeFrom(const ConnectToDeviceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectToDeviceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // .ServicesWithCharacteristics servicesWithCharacteristicsToDiscover = 2;
  bool has_serviceswithcharacteristicstodiscover() const;
  void clear_serviceswithcharacteristicstodiscover();
  static const int kServicesWithCharacteristicsToDiscoverFieldNumber = 2;
  private:
  const ::ServicesWithCharacteristics& _internal_serviceswithcharacteristicstodiscover() const;
  public:
  const ::ServicesWithCharacteristics& serviceswithcharacteristicstodiscover() const;
  ::ServicesWithCharacteristics* release_serviceswithcharacteristicstodiscover();
  ::ServicesWithCharacteristics* mutable_serviceswithcharacteristicstodiscover();
  void set_allocated_serviceswithcharacteristicstodiscover(::ServicesWithCharacteristics* serviceswithcharacteristicstodiscover);

  // int32 timeoutInMs = 3;
  void clear_timeoutinms();
  static const int kTimeoutInMsFieldNumber = 3;
  ::google::protobuf::int32 timeoutinms() const;
  void set_timeoutinms(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ConnectToDeviceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::ServicesWithCharacteristics* serviceswithcharacteristicstodiscover_;
  ::google::protobuf::int32 timeoutinms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DeviceInfo* other);
  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(NULL);
  }

  DeviceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .GenericFailure failure = 3;
  bool has_failure() const;
  void clear_failure();
  static const int kFailureFieldNumber = 3;
  private:
  const ::GenericFailure& _internal_failure() const;
  public:
  const ::GenericFailure& failure() const;
  ::GenericFailure* release_failure();
  ::GenericFailure* mutable_failure();
  void set_allocated_failure(::GenericFailure* failure);

  // int32 connectionState = 2;
  void clear_connectionstate();
  static const int kConnectionStateFieldNumber = 2;
  ::google::protobuf::int32 connectionstate() const;
  void set_connectionstate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DeviceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::GenericFailure* failure_;
  ::google::protobuf::int32 connectionstate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DisconnectFromDeviceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DisconnectFromDeviceRequest) */ {
 public:
  DisconnectFromDeviceRequest();
  virtual ~DisconnectFromDeviceRequest();

  DisconnectFromDeviceRequest(const DisconnectFromDeviceRequest& from);

  inline DisconnectFromDeviceRequest& operator=(const DisconnectFromDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisconnectFromDeviceRequest(DisconnectFromDeviceRequest&& from) noexcept
    : DisconnectFromDeviceRequest() {
    *this = ::std::move(from);
  }

  inline DisconnectFromDeviceRequest& operator=(DisconnectFromDeviceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisconnectFromDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectFromDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const DisconnectFromDeviceRequest*>(
               &_DisconnectFromDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DisconnectFromDeviceRequest* other);
  friend void swap(DisconnectFromDeviceRequest& a, DisconnectFromDeviceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisconnectFromDeviceRequest* New() const final {
    return CreateMaybeMessage<DisconnectFromDeviceRequest>(NULL);
  }

  DisconnectFromDeviceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectFromDeviceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DisconnectFromDeviceRequest& from);
  void MergeFrom(const DisconnectFromDeviceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectFromDeviceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // @@protoc_insertion_point(class_scope:DisconnectFromDeviceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearGattCacheRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClearGattCacheRequest) */ {
 public:
  ClearGattCacheRequest();
  virtual ~ClearGattCacheRequest();

  ClearGattCacheRequest(const ClearGattCacheRequest& from);

  inline ClearGattCacheRequest& operator=(const ClearGattCacheRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearGattCacheRequest(ClearGattCacheRequest&& from) noexcept
    : ClearGattCacheRequest() {
    *this = ::std::move(from);
  }

  inline ClearGattCacheRequest& operator=(ClearGattCacheRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearGattCacheRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearGattCacheRequest* internal_default_instance() {
    return reinterpret_cast<const ClearGattCacheRequest*>(
               &_ClearGattCacheRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ClearGattCacheRequest* other);
  friend void swap(ClearGattCacheRequest& a, ClearGattCacheRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearGattCacheRequest* New() const final {
    return CreateMaybeMessage<ClearGattCacheRequest>(NULL);
  }

  ClearGattCacheRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClearGattCacheRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClearGattCacheRequest& from);
  void MergeFrom(const ClearGattCacheRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearGattCacheRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // @@protoc_insertion_point(class_scope:ClearGattCacheRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearGattCacheInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClearGattCacheInfo) */ {
 public:
  ClearGattCacheInfo();
  virtual ~ClearGattCacheInfo();

  ClearGattCacheInfo(const ClearGattCacheInfo& from);

  inline ClearGattCacheInfo& operator=(const ClearGattCacheInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearGattCacheInfo(ClearGattCacheInfo&& from) noexcept
    : ClearGattCacheInfo() {
    *this = ::std::move(from);
  }

  inline ClearGattCacheInfo& operator=(ClearGattCacheInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearGattCacheInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearGattCacheInfo* internal_default_instance() {
    return reinterpret_cast<const ClearGattCacheInfo*>(
               &_ClearGattCacheInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ClearGattCacheInfo* other);
  friend void swap(ClearGattCacheInfo& a, ClearGattCacheInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearGattCacheInfo* New() const final {
    return CreateMaybeMessage<ClearGattCacheInfo>(NULL);
  }

  ClearGattCacheInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClearGattCacheInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClearGattCacheInfo& from);
  void MergeFrom(const ClearGattCacheInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearGattCacheInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GenericFailure failure = 1;
  bool has_failure() const;
  void clear_failure();
  static const int kFailureFieldNumber = 1;
  private:
  const ::GenericFailure& _internal_failure() const;
  public:
  const ::GenericFailure& failure() const;
  ::GenericFailure* release_failure();
  ::GenericFailure* mutable_failure();
  void set_allocated_failure(::GenericFailure* failure);

  // @@protoc_insertion_point(class_scope:ClearGattCacheInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GenericFailure* failure_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyCharacteristicRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NotifyCharacteristicRequest) */ {
 public:
  NotifyCharacteristicRequest();
  virtual ~NotifyCharacteristicRequest();

  NotifyCharacteristicRequest(const NotifyCharacteristicRequest& from);

  inline NotifyCharacteristicRequest& operator=(const NotifyCharacteristicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyCharacteristicRequest(NotifyCharacteristicRequest&& from) noexcept
    : NotifyCharacteristicRequest() {
    *this = ::std::move(from);
  }

  inline NotifyCharacteristicRequest& operator=(NotifyCharacteristicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyCharacteristicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyCharacteristicRequest* internal_default_instance() {
    return reinterpret_cast<const NotifyCharacteristicRequest*>(
               &_NotifyCharacteristicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(NotifyCharacteristicRequest* other);
  friend void swap(NotifyCharacteristicRequest& a, NotifyCharacteristicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyCharacteristicRequest* New() const final {
    return CreateMaybeMessage<NotifyCharacteristicRequest>(NULL);
  }

  NotifyCharacteristicRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyCharacteristicRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyCharacteristicRequest& from);
  void MergeFrom(const NotifyCharacteristicRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyCharacteristicRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CharacteristicAddress characteristic = 1;
  bool has_characteristic() const;
  void clear_characteristic();
  static const int kCharacteristicFieldNumber = 1;
  private:
  const ::CharacteristicAddress& _internal_characteristic() const;
  public:
  const ::CharacteristicAddress& characteristic() const;
  ::CharacteristicAddress* release_characteristic();
  ::CharacteristicAddress* mutable_characteristic();
  void set_allocated_characteristic(::CharacteristicAddress* characteristic);

  // @@protoc_insertion_point(class_scope:NotifyCharacteristicRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CharacteristicAddress* characteristic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyNoMoreCharacteristicRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NotifyNoMoreCharacteristicRequest) */ {
 public:
  NotifyNoMoreCharacteristicRequest();
  virtual ~NotifyNoMoreCharacteristicRequest();

  NotifyNoMoreCharacteristicRequest(const NotifyNoMoreCharacteristicRequest& from);

  inline NotifyNoMoreCharacteristicRequest& operator=(const NotifyNoMoreCharacteristicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyNoMoreCharacteristicRequest(NotifyNoMoreCharacteristicRequest&& from) noexcept
    : NotifyNoMoreCharacteristicRequest() {
    *this = ::std::move(from);
  }

  inline NotifyNoMoreCharacteristicRequest& operator=(NotifyNoMoreCharacteristicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyNoMoreCharacteristicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyNoMoreCharacteristicRequest* internal_default_instance() {
    return reinterpret_cast<const NotifyNoMoreCharacteristicRequest*>(
               &_NotifyNoMoreCharacteristicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(NotifyNoMoreCharacteristicRequest* other);
  friend void swap(NotifyNoMoreCharacteristicRequest& a, NotifyNoMoreCharacteristicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyNoMoreCharacteristicRequest* New() const final {
    return CreateMaybeMessage<NotifyNoMoreCharacteristicRequest>(NULL);
  }

  NotifyNoMoreCharacteristicRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyNoMoreCharacteristicRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyNoMoreCharacteristicRequest& from);
  void MergeFrom(const NotifyNoMoreCharacteristicRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyNoMoreCharacteristicRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CharacteristicAddress characteristic = 1;
  bool has_characteristic() const;
  void clear_characteristic();
  static const int kCharacteristicFieldNumber = 1;
  private:
  const ::CharacteristicAddress& _internal_characteristic() const;
  public:
  const ::CharacteristicAddress& characteristic() const;
  ::CharacteristicAddress* release_characteristic();
  ::CharacteristicAddress* mutable_characteristic();
  void set_allocated_characteristic(::CharacteristicAddress* characteristic);

  // @@protoc_insertion_point(class_scope:NotifyNoMoreCharacteristicRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CharacteristicAddress* characteristic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadCharacteristicRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReadCharacteristicRequest) */ {
 public:
  ReadCharacteristicRequest();
  virtual ~ReadCharacteristicRequest();

  ReadCharacteristicRequest(const ReadCharacteristicRequest& from);

  inline ReadCharacteristicRequest& operator=(const ReadCharacteristicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadCharacteristicRequest(ReadCharacteristicRequest&& from) noexcept
    : ReadCharacteristicRequest() {
    *this = ::std::move(from);
  }

  inline ReadCharacteristicRequest& operator=(ReadCharacteristicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadCharacteristicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadCharacteristicRequest* internal_default_instance() {
    return reinterpret_cast<const ReadCharacteristicRequest*>(
               &_ReadCharacteristicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ReadCharacteristicRequest* other);
  friend void swap(ReadCharacteristicRequest& a, ReadCharacteristicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadCharacteristicRequest* New() const final {
    return CreateMaybeMessage<ReadCharacteristicRequest>(NULL);
  }

  ReadCharacteristicRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadCharacteristicRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadCharacteristicRequest& from);
  void MergeFrom(const ReadCharacteristicRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadCharacteristicRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CharacteristicAddress characteristic = 1;
  bool has_characteristic() const;
  void clear_characteristic();
  static const int kCharacteristicFieldNumber = 1;
  private:
  const ::CharacteristicAddress& _internal_characteristic() const;
  public:
  const ::CharacteristicAddress& characteristic() const;
  ::CharacteristicAddress* release_characteristic();
  ::CharacteristicAddress* mutable_characteristic();
  void set_allocated_characteristic(::CharacteristicAddress* characteristic);

  // @@protoc_insertion_point(class_scope:ReadCharacteristicRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CharacteristicAddress* characteristic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CharacteristicValueInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CharacteristicValueInfo) */ {
 public:
  CharacteristicValueInfo();
  virtual ~CharacteristicValueInfo();

  CharacteristicValueInfo(const CharacteristicValueInfo& from);

  inline CharacteristicValueInfo& operator=(const CharacteristicValueInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharacteristicValueInfo(CharacteristicValueInfo&& from) noexcept
    : CharacteristicValueInfo() {
    *this = ::std::move(from);
  }

  inline CharacteristicValueInfo& operator=(CharacteristicValueInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacteristicValueInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharacteristicValueInfo* internal_default_instance() {
    return reinterpret_cast<const CharacteristicValueInfo*>(
               &_CharacteristicValueInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CharacteristicValueInfo* other);
  friend void swap(CharacteristicValueInfo& a, CharacteristicValueInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharacteristicValueInfo* New() const final {
    return CreateMaybeMessage<CharacteristicValueInfo>(NULL);
  }

  CharacteristicValueInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CharacteristicValueInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CharacteristicValueInfo& from);
  void MergeFrom(const CharacteristicValueInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacteristicValueInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .CharacteristicAddress characteristic = 1;
  bool has_characteristic() const;
  void clear_characteristic();
  static const int kCharacteristicFieldNumber = 1;
  private:
  const ::CharacteristicAddress& _internal_characteristic() const;
  public:
  const ::CharacteristicAddress& characteristic() const;
  ::CharacteristicAddress* release_characteristic();
  ::CharacteristicAddress* mutable_characteristic();
  void set_allocated_characteristic(::CharacteristicAddress* characteristic);

  // .GenericFailure failure = 3;
  bool has_failure() const;
  void clear_failure();
  static const int kFailureFieldNumber = 3;
  private:
  const ::GenericFailure& _internal_failure() const;
  public:
  const ::GenericFailure& failure() const;
  ::GenericFailure* release_failure();
  ::GenericFailure* mutable_failure();
  void set_allocated_failure(::GenericFailure* failure);

  // @@protoc_insertion_point(class_scope:CharacteristicValueInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::CharacteristicAddress* characteristic_;
  ::GenericFailure* failure_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteCharacteristicRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WriteCharacteristicRequest) */ {
 public:
  WriteCharacteristicRequest();
  virtual ~WriteCharacteristicRequest();

  WriteCharacteristicRequest(const WriteCharacteristicRequest& from);

  inline WriteCharacteristicRequest& operator=(const WriteCharacteristicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteCharacteristicRequest(WriteCharacteristicRequest&& from) noexcept
    : WriteCharacteristicRequest() {
    *this = ::std::move(from);
  }

  inline WriteCharacteristicRequest& operator=(WriteCharacteristicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteCharacteristicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteCharacteristicRequest* internal_default_instance() {
    return reinterpret_cast<const WriteCharacteristicRequest*>(
               &_WriteCharacteristicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(WriteCharacteristicRequest* other);
  friend void swap(WriteCharacteristicRequest& a, WriteCharacteristicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteCharacteristicRequest* New() const final {
    return CreateMaybeMessage<WriteCharacteristicRequest>(NULL);
  }

  WriteCharacteristicRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteCharacteristicRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteCharacteristicRequest& from);
  void MergeFrom(const WriteCharacteristicRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteCharacteristicRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .CharacteristicAddress characteristic = 1;
  bool has_characteristic() const;
  void clear_characteristic();
  static const int kCharacteristicFieldNumber = 1;
  private:
  const ::CharacteristicAddress& _internal_characteristic() const;
  public:
  const ::CharacteristicAddress& characteristic() const;
  ::CharacteristicAddress* release_characteristic();
  ::CharacteristicAddress* mutable_characteristic();
  void set_allocated_characteristic(::CharacteristicAddress* characteristic);

  // @@protoc_insertion_point(class_scope:WriteCharacteristicRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::CharacteristicAddress* characteristic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteCharacteristicInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WriteCharacteristicInfo) */ {
 public:
  WriteCharacteristicInfo();
  virtual ~WriteCharacteristicInfo();

  WriteCharacteristicInfo(const WriteCharacteristicInfo& from);

  inline WriteCharacteristicInfo& operator=(const WriteCharacteristicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteCharacteristicInfo(WriteCharacteristicInfo&& from) noexcept
    : WriteCharacteristicInfo() {
    *this = ::std::move(from);
  }

  inline WriteCharacteristicInfo& operator=(WriteCharacteristicInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteCharacteristicInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteCharacteristicInfo* internal_default_instance() {
    return reinterpret_cast<const WriteCharacteristicInfo*>(
               &_WriteCharacteristicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(WriteCharacteristicInfo* other);
  friend void swap(WriteCharacteristicInfo& a, WriteCharacteristicInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteCharacteristicInfo* New() const final {
    return CreateMaybeMessage<WriteCharacteristicInfo>(NULL);
  }

  WriteCharacteristicInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteCharacteristicInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteCharacteristicInfo& from);
  void MergeFrom(const WriteCharacteristicInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteCharacteristicInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CharacteristicAddress characteristic = 1;
  bool has_characteristic() const;
  void clear_characteristic();
  static const int kCharacteristicFieldNumber = 1;
  private:
  const ::CharacteristicAddress& _internal_characteristic() const;
  public:
  const ::CharacteristicAddress& characteristic() const;
  ::CharacteristicAddress* release_characteristic();
  ::CharacteristicAddress* mutable_characteristic();
  void set_allocated_characteristic(::CharacteristicAddress* characteristic);

  // .GenericFailure failure = 3;
  bool has_failure() const;
  void clear_failure();
  static const int kFailureFieldNumber = 3;
  private:
  const ::GenericFailure& _internal_failure() const;
  public:
  const ::GenericFailure& failure() const;
  ::GenericFailure* release_failure();
  ::GenericFailure* mutable_failure();
  void set_allocated_failure(::GenericFailure* failure);

  // @@protoc_insertion_point(class_scope:WriteCharacteristicInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CharacteristicAddress* characteristic_;
  ::GenericFailure* failure_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NegotiateMtuRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NegotiateMtuRequest) */ {
 public:
  NegotiateMtuRequest();
  virtual ~NegotiateMtuRequest();

  NegotiateMtuRequest(const NegotiateMtuRequest& from);

  inline NegotiateMtuRequest& operator=(const NegotiateMtuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NegotiateMtuRequest(NegotiateMtuRequest&& from) noexcept
    : NegotiateMtuRequest() {
    *this = ::std::move(from);
  }

  inline NegotiateMtuRequest& operator=(NegotiateMtuRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NegotiateMtuRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NegotiateMtuRequest* internal_default_instance() {
    return reinterpret_cast<const NegotiateMtuRequest*>(
               &_NegotiateMtuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(NegotiateMtuRequest* other);
  friend void swap(NegotiateMtuRequest& a, NegotiateMtuRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NegotiateMtuRequest* New() const final {
    return CreateMaybeMessage<NegotiateMtuRequest>(NULL);
  }

  NegotiateMtuRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NegotiateMtuRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NegotiateMtuRequest& from);
  void MergeFrom(const NegotiateMtuRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NegotiateMtuRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // int32 mtuSize = 2;
  void clear_mtusize();
  static const int kMtuSizeFieldNumber = 2;
  ::google::protobuf::int32 mtusize() const;
  void set_mtusize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NegotiateMtuRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::int32 mtusize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NegotiateMtuInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NegotiateMtuInfo) */ {
 public:
  NegotiateMtuInfo();
  virtual ~NegotiateMtuInfo();

  NegotiateMtuInfo(const NegotiateMtuInfo& from);

  inline NegotiateMtuInfo& operator=(const NegotiateMtuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NegotiateMtuInfo(NegotiateMtuInfo&& from) noexcept
    : NegotiateMtuInfo() {
    *this = ::std::move(from);
  }

  inline NegotiateMtuInfo& operator=(NegotiateMtuInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NegotiateMtuInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NegotiateMtuInfo* internal_default_instance() {
    return reinterpret_cast<const NegotiateMtuInfo*>(
               &_NegotiateMtuInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(NegotiateMtuInfo* other);
  friend void swap(NegotiateMtuInfo& a, NegotiateMtuInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NegotiateMtuInfo* New() const final {
    return CreateMaybeMessage<NegotiateMtuInfo>(NULL);
  }

  NegotiateMtuInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NegotiateMtuInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NegotiateMtuInfo& from);
  void MergeFrom(const NegotiateMtuInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NegotiateMtuInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // .GenericFailure failure = 3;
  bool has_failure() const;
  void clear_failure();
  static const int kFailureFieldNumber = 3;
  private:
  const ::GenericFailure& _internal_failure() const;
  public:
  const ::GenericFailure& failure() const;
  ::GenericFailure* release_failure();
  ::GenericFailure* mutable_failure();
  void set_allocated_failure(::GenericFailure* failure);

  // int32 mtuSize = 2;
  void clear_mtusize();
  static const int kMtuSizeFieldNumber = 2;
  ::google::protobuf::int32 mtusize() const;
  void set_mtusize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NegotiateMtuInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::GenericFailure* failure_;
  ::google::protobuf::int32 mtusize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BleStatusInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BleStatusInfo) */ {
 public:
  BleStatusInfo();
  virtual ~BleStatusInfo();

  BleStatusInfo(const BleStatusInfo& from);

  inline BleStatusInfo& operator=(const BleStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BleStatusInfo(BleStatusInfo&& from) noexcept
    : BleStatusInfo() {
    *this = ::std::move(from);
  }

  inline BleStatusInfo& operator=(BleStatusInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BleStatusInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BleStatusInfo* internal_default_instance() {
    return reinterpret_cast<const BleStatusInfo*>(
               &_BleStatusInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(BleStatusInfo* other);
  friend void swap(BleStatusInfo& a, BleStatusInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BleStatusInfo* New() const final {
    return CreateMaybeMessage<BleStatusInfo>(NULL);
  }

  BleStatusInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BleStatusInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BleStatusInfo& from);
  void MergeFrom(const BleStatusInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleStatusInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BleStatusInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeConnectionPriorityRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChangeConnectionPriorityRequest) */ {
 public:
  ChangeConnectionPriorityRequest();
  virtual ~ChangeConnectionPriorityRequest();

  ChangeConnectionPriorityRequest(const ChangeConnectionPriorityRequest& from);

  inline ChangeConnectionPriorityRequest& operator=(const ChangeConnectionPriorityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeConnectionPriorityRequest(ChangeConnectionPriorityRequest&& from) noexcept
    : ChangeConnectionPriorityRequest() {
    *this = ::std::move(from);
  }

  inline ChangeConnectionPriorityRequest& operator=(ChangeConnectionPriorityRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeConnectionPriorityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeConnectionPriorityRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeConnectionPriorityRequest*>(
               &_ChangeConnectionPriorityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ChangeConnectionPriorityRequest* other);
  friend void swap(ChangeConnectionPriorityRequest& a, ChangeConnectionPriorityRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeConnectionPriorityRequest* New() const final {
    return CreateMaybeMessage<ChangeConnectionPriorityRequest>(NULL);
  }

  ChangeConnectionPriorityRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeConnectionPriorityRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeConnectionPriorityRequest& from);
  void MergeFrom(const ChangeConnectionPriorityRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeConnectionPriorityRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // int32 priority = 2;
  void clear_priority();
  static const int kPriorityFieldNumber = 2;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ChangeConnectionPriorityRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::int32 priority_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeConnectionPriorityInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChangeConnectionPriorityInfo) */ {
 public:
  ChangeConnectionPriorityInfo();
  virtual ~ChangeConnectionPriorityInfo();

  ChangeConnectionPriorityInfo(const ChangeConnectionPriorityInfo& from);

  inline ChangeConnectionPriorityInfo& operator=(const ChangeConnectionPriorityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeConnectionPriorityInfo(ChangeConnectionPriorityInfo&& from) noexcept
    : ChangeConnectionPriorityInfo() {
    *this = ::std::move(from);
  }

  inline ChangeConnectionPriorityInfo& operator=(ChangeConnectionPriorityInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeConnectionPriorityInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeConnectionPriorityInfo* internal_default_instance() {
    return reinterpret_cast<const ChangeConnectionPriorityInfo*>(
               &_ChangeConnectionPriorityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ChangeConnectionPriorityInfo* other);
  friend void swap(ChangeConnectionPriorityInfo& a, ChangeConnectionPriorityInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeConnectionPriorityInfo* New() const final {
    return CreateMaybeMessage<ChangeConnectionPriorityInfo>(NULL);
  }

  ChangeConnectionPriorityInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeConnectionPriorityInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeConnectionPriorityInfo& from);
  void MergeFrom(const ChangeConnectionPriorityInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeConnectionPriorityInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // .GenericFailure failure = 2;
  bool has_failure() const;
  void clear_failure();
  static const int kFailureFieldNumber = 2;
  private:
  const ::GenericFailure& _internal_failure() const;
  public:
  const ::GenericFailure& failure() const;
  ::GenericFailure* release_failure();
  ::GenericFailure* mutable_failure();
  void set_allocated_failure(::GenericFailure* failure);

  // @@protoc_insertion_point(class_scope:ChangeConnectionPriorityInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::GenericFailure* failure_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CharacteristicAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CharacteristicAddress) */ {
 public:
  CharacteristicAddress();
  virtual ~CharacteristicAddress();

  CharacteristicAddress(const CharacteristicAddress& from);

  inline CharacteristicAddress& operator=(const CharacteristicAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharacteristicAddress(CharacteristicAddress&& from) noexcept
    : CharacteristicAddress() {
    *this = ::std::move(from);
  }

  inline CharacteristicAddress& operator=(CharacteristicAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacteristicAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharacteristicAddress* internal_default_instance() {
    return reinterpret_cast<const CharacteristicAddress*>(
               &_CharacteristicAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CharacteristicAddress* other);
  friend void swap(CharacteristicAddress& a, CharacteristicAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharacteristicAddress* New() const final {
    return CreateMaybeMessage<CharacteristicAddress>(NULL);
  }

  CharacteristicAddress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CharacteristicAddress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CharacteristicAddress& from);
  void MergeFrom(const CharacteristicAddress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacteristicAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // .Uuid serviceUuid = 2;
  bool has_serviceuuid() const;
  void clear_serviceuuid();
  static const int kServiceUuidFieldNumber = 2;
  private:
  const ::Uuid& _internal_serviceuuid() const;
  public:
  const ::Uuid& serviceuuid() const;
  ::Uuid* release_serviceuuid();
  ::Uuid* mutable_serviceuuid();
  void set_allocated_serviceuuid(::Uuid* serviceuuid);

  // .Uuid characteristicUuid = 3;
  bool has_characteristicuuid() const;
  void clear_characteristicuuid();
  static const int kCharacteristicUuidFieldNumber = 3;
  private:
  const ::Uuid& _internal_characteristicuuid() const;
  public:
  const ::Uuid& characteristicuuid() const;
  ::Uuid* release_characteristicuuid();
  ::Uuid* mutable_characteristicuuid();
  void set_allocated_characteristicuuid(::Uuid* characteristicuuid);

  // @@protoc_insertion_point(class_scope:CharacteristicAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::Uuid* serviceuuid_;
  ::Uuid* characteristicuuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceDataEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServiceDataEntry) */ {
 public:
  ServiceDataEntry();
  virtual ~ServiceDataEntry();

  ServiceDataEntry(const ServiceDataEntry& from);

  inline ServiceDataEntry& operator=(const ServiceDataEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceDataEntry(ServiceDataEntry&& from) noexcept
    : ServiceDataEntry() {
    *this = ::std::move(from);
  }

  inline ServiceDataEntry& operator=(ServiceDataEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceDataEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceDataEntry* internal_default_instance() {
    return reinterpret_cast<const ServiceDataEntry*>(
               &_ServiceDataEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ServiceDataEntry* other);
  friend void swap(ServiceDataEntry& a, ServiceDataEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceDataEntry* New() const final {
    return CreateMaybeMessage<ServiceDataEntry>(NULL);
  }

  ServiceDataEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceDataEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceDataEntry& from);
  void MergeFrom(const ServiceDataEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceDataEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .Uuid serviceUuid = 1;
  bool has_serviceuuid() const;
  void clear_serviceuuid();
  static const int kServiceUuidFieldNumber = 1;
  private:
  const ::Uuid& _internal_serviceuuid() const;
  public:
  const ::Uuid& serviceuuid() const;
  ::Uuid* release_serviceuuid();
  ::Uuid* mutable_serviceuuid();
  void set_allocated_serviceuuid(::Uuid* serviceuuid);

  // @@protoc_insertion_point(class_scope:ServiceDataEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::Uuid* serviceuuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServicesWithCharacteristics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServicesWithCharacteristics) */ {
 public:
  ServicesWithCharacteristics();
  virtual ~ServicesWithCharacteristics();

  ServicesWithCharacteristics(const ServicesWithCharacteristics& from);

  inline ServicesWithCharacteristics& operator=(const ServicesWithCharacteristics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServicesWithCharacteristics(ServicesWithCharacteristics&& from) noexcept
    : ServicesWithCharacteristics() {
    *this = ::std::move(from);
  }

  inline ServicesWithCharacteristics& operator=(ServicesWithCharacteristics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServicesWithCharacteristics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServicesWithCharacteristics* internal_default_instance() {
    return reinterpret_cast<const ServicesWithCharacteristics*>(
               &_ServicesWithCharacteristics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ServicesWithCharacteristics* other);
  friend void swap(ServicesWithCharacteristics& a, ServicesWithCharacteristics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServicesWithCharacteristics* New() const final {
    return CreateMaybeMessage<ServicesWithCharacteristics>(NULL);
  }

  ServicesWithCharacteristics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServicesWithCharacteristics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServicesWithCharacteristics& from);
  void MergeFrom(const ServicesWithCharacteristics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServicesWithCharacteristics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServiceWithCharacteristics items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  ::ServiceWithCharacteristics* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::ServiceWithCharacteristics >*
      mutable_items();
  const ::ServiceWithCharacteristics& items(int index) const;
  ::ServiceWithCharacteristics* add_items();
  const ::google::protobuf::RepeatedPtrField< ::ServiceWithCharacteristics >&
      items() const;

  // @@protoc_insertion_point(class_scope:ServicesWithCharacteristics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServiceWithCharacteristics > items_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceWithCharacteristics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServiceWithCharacteristics) */ {
 public:
  ServiceWithCharacteristics();
  virtual ~ServiceWithCharacteristics();

  ServiceWithCharacteristics(const ServiceWithCharacteristics& from);

  inline ServiceWithCharacteristics& operator=(const ServiceWithCharacteristics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceWithCharacteristics(ServiceWithCharacteristics&& from) noexcept
    : ServiceWithCharacteristics() {
    *this = ::std::move(from);
  }

  inline ServiceWithCharacteristics& operator=(ServiceWithCharacteristics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceWithCharacteristics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceWithCharacteristics* internal_default_instance() {
    return reinterpret_cast<const ServiceWithCharacteristics*>(
               &_ServiceWithCharacteristics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(ServiceWithCharacteristics* other);
  friend void swap(ServiceWithCharacteristics& a, ServiceWithCharacteristics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceWithCharacteristics* New() const final {
    return CreateMaybeMessage<ServiceWithCharacteristics>(NULL);
  }

  ServiceWithCharacteristics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceWithCharacteristics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceWithCharacteristics& from);
  void MergeFrom(const ServiceWithCharacteristics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceWithCharacteristics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Uuid characteristics = 2;
  int characteristics_size() const;
  void clear_characteristics();
  static const int kCharacteristicsFieldNumber = 2;
  ::Uuid* mutable_characteristics(int index);
  ::google::protobuf::RepeatedPtrField< ::Uuid >*
      mutable_characteristics();
  const ::Uuid& characteristics(int index) const;
  ::Uuid* add_characteristics();
  const ::google::protobuf::RepeatedPtrField< ::Uuid >&
      characteristics() const;

  // .Uuid serviceId = 1;
  bool has_serviceid() const;
  void clear_serviceid();
  static const int kServiceIdFieldNumber = 1;
  private:
  const ::Uuid& _internal_serviceid() const;
  public:
  const ::Uuid& serviceid() const;
  ::Uuid* release_serviceid();
  ::Uuid* mutable_serviceid();
  void set_allocated_serviceid(::Uuid* serviceid);

  // @@protoc_insertion_point(class_scope:ServiceWithCharacteristics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Uuid > characteristics_;
  ::Uuid* serviceid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiscoverServicesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DiscoverServicesRequest) */ {
 public:
  DiscoverServicesRequest();
  virtual ~DiscoverServicesRequest();

  DiscoverServicesRequest(const DiscoverServicesRequest& from);

  inline DiscoverServicesRequest& operator=(const DiscoverServicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiscoverServicesRequest(DiscoverServicesRequest&& from) noexcept
    : DiscoverServicesRequest() {
    *this = ::std::move(from);
  }

  inline DiscoverServicesRequest& operator=(DiscoverServicesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscoverServicesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoverServicesRequest* internal_default_instance() {
    return reinterpret_cast<const DiscoverServicesRequest*>(
               &_DiscoverServicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(DiscoverServicesRequest* other);
  friend void swap(DiscoverServicesRequest& a, DiscoverServicesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiscoverServicesRequest* New() const final {
    return CreateMaybeMessage<DiscoverServicesRequest>(NULL);
  }

  DiscoverServicesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiscoverServicesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiscoverServicesRequest& from);
  void MergeFrom(const DiscoverServicesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoverServicesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // @@protoc_insertion_point(class_scope:DiscoverServicesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiscoverServicesInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DiscoverServicesInfo) */ {
 public:
  DiscoverServicesInfo();
  virtual ~DiscoverServicesInfo();

  DiscoverServicesInfo(const DiscoverServicesInfo& from);

  inline DiscoverServicesInfo& operator=(const DiscoverServicesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiscoverServicesInfo(DiscoverServicesInfo&& from) noexcept
    : DiscoverServicesInfo() {
    *this = ::std::move(from);
  }

  inline DiscoverServicesInfo& operator=(DiscoverServicesInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscoverServicesInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoverServicesInfo* internal_default_instance() {
    return reinterpret_cast<const DiscoverServicesInfo*>(
               &_DiscoverServicesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(DiscoverServicesInfo* other);
  friend void swap(DiscoverServicesInfo& a, DiscoverServicesInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiscoverServicesInfo* New() const final {
    return CreateMaybeMessage<DiscoverServicesInfo>(NULL);
  }

  DiscoverServicesInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiscoverServicesInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiscoverServicesInfo& from);
  void MergeFrom(const DiscoverServicesInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoverServicesInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DiscoveredService services = 2;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 2;
  ::DiscoveredService* mutable_services(int index);
  ::google::protobuf::RepeatedPtrField< ::DiscoveredService >*
      mutable_services();
  const ::DiscoveredService& services(int index) const;
  ::DiscoveredService* add_services();
  const ::google::protobuf::RepeatedPtrField< ::DiscoveredService >&
      services() const;

  // string deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // @@protoc_insertion_point(class_scope:DiscoverServicesInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::DiscoveredService > services_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiscoveredService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DiscoveredService) */ {
 public:
  DiscoveredService();
  virtual ~DiscoveredService();

  DiscoveredService(const DiscoveredService& from);

  inline DiscoveredService& operator=(const DiscoveredService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiscoveredService(DiscoveredService&& from) noexcept
    : DiscoveredService() {
    *this = ::std::move(from);
  }

  inline DiscoveredService& operator=(DiscoveredService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscoveredService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoveredService* internal_default_instance() {
    return reinterpret_cast<const DiscoveredService*>(
               &_DiscoveredService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(DiscoveredService* other);
  friend void swap(DiscoveredService& a, DiscoveredService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiscoveredService* New() const final {
    return CreateMaybeMessage<DiscoveredService>(NULL);
  }

  DiscoveredService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiscoveredService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiscoveredService& from);
  void MergeFrom(const DiscoveredService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveredService* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Uuid characteristicUuids = 2;
  int characteristicuuids_size() const;
  void clear_characteristicuuids();
  static const int kCharacteristicUuidsFieldNumber = 2;
  ::Uuid* mutable_characteristicuuids(int index);
  ::google::protobuf::RepeatedPtrField< ::Uuid >*
      mutable_characteristicuuids();
  const ::Uuid& characteristicuuids(int index) const;
  ::Uuid* add_characteristicuuids();
  const ::google::protobuf::RepeatedPtrField< ::Uuid >&
      characteristicuuids() const;

  // repeated .DiscoveredService includedServices = 3;
  int includedservices_size() const;
  void clear_includedservices();
  static const int kIncludedServicesFieldNumber = 3;
  ::DiscoveredService* mutable_includedservices(int index);
  ::google::protobuf::RepeatedPtrField< ::DiscoveredService >*
      mutable_includedservices();
  const ::DiscoveredService& includedservices(int index) const;
  ::DiscoveredService* add_includedservices();
  const ::google::protobuf::RepeatedPtrField< ::DiscoveredService >&
      includedservices() const;

  // repeated .DiscoveredCharacteristic characteristics = 4;
  int characteristics_size() const;
  void clear_characteristics();
  static const int kCharacteristicsFieldNumber = 4;
  ::DiscoveredCharacteristic* mutable_characteristics(int index);
  ::google::protobuf::RepeatedPtrField< ::DiscoveredCharacteristic >*
      mutable_characteristics();
  const ::DiscoveredCharacteristic& characteristics(int index) const;
  ::DiscoveredCharacteristic* add_characteristics();
  const ::google::protobuf::RepeatedPtrField< ::DiscoveredCharacteristic >&
      characteristics() const;

  // .Uuid serviceUuid = 1;
  bool has_serviceuuid() const;
  void clear_serviceuuid();
  static const int kServiceUuidFieldNumber = 1;
  private:
  const ::Uuid& _internal_serviceuuid() const;
  public:
  const ::Uuid& serviceuuid() const;
  ::Uuid* release_serviceuuid();
  ::Uuid* mutable_serviceuuid();
  void set_allocated_serviceuuid(::Uuid* serviceuuid);

  // @@protoc_insertion_point(class_scope:DiscoveredService)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Uuid > characteristicuuids_;
  ::google::protobuf::RepeatedPtrField< ::DiscoveredService > includedservices_;
  ::google::protobuf::RepeatedPtrField< ::DiscoveredCharacteristic > characteristics_;
  ::Uuid* serviceuuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiscoveredCharacteristic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DiscoveredCharacteristic) */ {
 public:
  DiscoveredCharacteristic();
  virtual ~DiscoveredCharacteristic();

  DiscoveredCharacteristic(const DiscoveredCharacteristic& from);

  inline DiscoveredCharacteristic& operator=(const DiscoveredCharacteristic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiscoveredCharacteristic(DiscoveredCharacteristic&& from) noexcept
    : DiscoveredCharacteristic() {
    *this = ::std::move(from);
  }

  inline DiscoveredCharacteristic& operator=(DiscoveredCharacteristic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscoveredCharacteristic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoveredCharacteristic* internal_default_instance() {
    return reinterpret_cast<const DiscoveredCharacteristic*>(
               &_DiscoveredCharacteristic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DiscoveredCharacteristic* other);
  friend void swap(DiscoveredCharacteristic& a, DiscoveredCharacteristic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiscoveredCharacteristic* New() const final {
    return CreateMaybeMessage<DiscoveredCharacteristic>(NULL);
  }

  DiscoveredCharacteristic* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiscoveredCharacteristic>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiscoveredCharacteristic& from);
  void MergeFrom(const DiscoveredCharacteristic& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveredCharacteristic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Uuid characteristicId = 1;
  bool has_characteristicid() const;
  void clear_characteristicid();
  static const int kCharacteristicIdFieldNumber = 1;
  private:
  const ::Uuid& _internal_characteristicid() const;
  public:
  const ::Uuid& characteristicid() const;
  ::Uuid* release_characteristicid();
  ::Uuid* mutable_characteristicid();
  void set_allocated_characteristicid(::Uuid* characteristicid);

  // .Uuid serviceId = 2;
  bool has_serviceid() const;
  void clear_serviceid();
  static const int kServiceIdFieldNumber = 2;
  private:
  const ::Uuid& _internal_serviceid() const;
  public:
  const ::Uuid& serviceid() const;
  ::Uuid* release_serviceid();
  ::Uuid* mutable_serviceid();
  void set_allocated_serviceid(::Uuid* serviceid);

  // bool isReadable = 3;
  void clear_isreadable();
  static const int kIsReadableFieldNumber = 3;
  bool isreadable() const;
  void set_isreadable(bool value);

  // bool isWritableWithResponse = 4;
  void clear_iswritablewithresponse();
  static const int kIsWritableWithResponseFieldNumber = 4;
  bool iswritablewithresponse() const;
  void set_iswritablewithresponse(bool value);

  // bool isWritableWithoutResponse = 5;
  void clear_iswritablewithoutresponse();
  static const int kIsWritableWithoutResponseFieldNumber = 5;
  bool iswritablewithoutresponse() const;
  void set_iswritablewithoutresponse(bool value);

  // bool isNotifiable = 6;
  void clear_isnotifiable();
  static const int kIsNotifiableFieldNumber = 6;
  bool isnotifiable() const;
  void set_isnotifiable(bool value);

  // bool isIndicatable = 7;
  void clear_isindicatable();
  static const int kIsIndicatableFieldNumber = 7;
  bool isindicatable() const;
  void set_isindicatable(bool value);

  // @@protoc_insertion_point(class_scope:DiscoveredCharacteristic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Uuid* characteristicid_;
  ::Uuid* serviceid_;
  bool isreadable_;
  bool iswritablewithresponse_;
  bool iswritablewithoutresponse_;
  bool isnotifiable_;
  bool isindicatable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Uuid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Uuid) */ {
 public:
  Uuid();
  virtual ~Uuid();

  Uuid(const Uuid& from);

  inline Uuid& operator=(const Uuid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Uuid(Uuid&& from) noexcept
    : Uuid() {
    *this = ::std::move(from);
  }

  inline Uuid& operator=(Uuid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Uuid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uuid* internal_default_instance() {
    return reinterpret_cast<const Uuid*>(
               &_Uuid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(Uuid* other);
  friend void swap(Uuid& a, Uuid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Uuid* New() const final {
    return CreateMaybeMessage<Uuid>(NULL);
  }

  Uuid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Uuid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Uuid& from);
  void MergeFrom(const Uuid& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uuid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Uuid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GenericFailure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GenericFailure) */ {
 public:
  GenericFailure();
  virtual ~GenericFailure();

  GenericFailure(const GenericFailure& from);

  inline GenericFailure& operator=(const GenericFailure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenericFailure(GenericFailure&& from) noexcept
    : GenericFailure() {
    *this = ::std::move(from);
  }

  inline GenericFailure& operator=(GenericFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericFailure* internal_default_instance() {
    return reinterpret_cast<const GenericFailure*>(
               &_GenericFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(GenericFailure* other);
  friend void swap(GenericFailure& a, GenericFailure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenericFailure* New() const final {
    return CreateMaybeMessage<GenericFailure>(NULL);
  }

  GenericFailure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenericFailure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenericFailure& from);
  void MergeFrom(const GenericFailure& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericFailure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GenericFailure)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bledata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScanForDevicesRequest

// repeated .Uuid serviceUuids = 1;
inline int ScanForDevicesRequest::serviceuuids_size() const {
  return serviceuuids_.size();
}
inline void ScanForDevicesRequest::clear_serviceuuids() {
  serviceuuids_.Clear();
}
inline ::Uuid* ScanForDevicesRequest::mutable_serviceuuids(int index) {
  // @@protoc_insertion_point(field_mutable:ScanForDevicesRequest.serviceUuids)
  return serviceuuids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Uuid >*
ScanForDevicesRequest::mutable_serviceuuids() {
  // @@protoc_insertion_point(field_mutable_list:ScanForDevicesRequest.serviceUuids)
  return &serviceuuids_;
}
inline const ::Uuid& ScanForDevicesRequest::serviceuuids(int index) const {
  // @@protoc_insertion_point(field_get:ScanForDevicesRequest.serviceUuids)
  return serviceuuids_.Get(index);
}
inline ::Uuid* ScanForDevicesRequest::add_serviceuuids() {
  // @@protoc_insertion_point(field_add:ScanForDevicesRequest.serviceUuids)
  return serviceuuids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Uuid >&
ScanForDevicesRequest::serviceuuids() const {
  // @@protoc_insertion_point(field_list:ScanForDevicesRequest.serviceUuids)
  return serviceuuids_;
}

// int32 scanMode = 2;
inline void ScanForDevicesRequest::clear_scanmode() {
  scanmode_ = 0;
}
inline ::google::protobuf::int32 ScanForDevicesRequest::scanmode() const {
  // @@protoc_insertion_point(field_get:ScanForDevicesRequest.scanMode)
  return scanmode_;
}
inline void ScanForDevicesRequest::set_scanmode(::google::protobuf::int32 value) {
  
  scanmode_ = value;
  // @@protoc_insertion_point(field_set:ScanForDevicesRequest.scanMode)
}

// bool requireLocationServicesEnabled = 3;
inline void ScanForDevicesRequest::clear_requirelocationservicesenabled() {
  requirelocationservicesenabled_ = false;
}
inline bool ScanForDevicesRequest::requirelocationservicesenabled() const {
  // @@protoc_insertion_point(field_get:ScanForDevicesRequest.requireLocationServicesEnabled)
  return requirelocationservicesenabled_;
}
inline void ScanForDevicesRequest::set_requirelocationservicesenabled(bool value) {
  
  requirelocationservicesenabled_ = value;
  // @@protoc_insertion_point(field_set:ScanForDevicesRequest.requireLocationServicesEnabled)
}

// -------------------------------------------------------------------

// DeviceScanInfo

// string id = 1;
inline void DeviceScanInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceScanInfo::id() const {
  // @@protoc_insertion_point(field_get:DeviceScanInfo.id)
  return id_.GetNoArena();
}
inline void DeviceScanInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceScanInfo.id)
}
#if LANG_CXX11
inline void DeviceScanInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceScanInfo.id)
}
#endif
inline void DeviceScanInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceScanInfo.id)
}
inline void DeviceScanInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceScanInfo.id)
}
inline ::std::string* DeviceScanInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:DeviceScanInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceScanInfo::release_id() {
  // @@protoc_insertion_point(field_release:DeviceScanInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceScanInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:DeviceScanInfo.id)
}

// string name = 2;
inline void DeviceScanInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceScanInfo::name() const {
  // @@protoc_insertion_point(field_get:DeviceScanInfo.name)
  return name_.GetNoArena();
}
inline void DeviceScanInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceScanInfo.name)
}
#if LANG_CXX11
inline void DeviceScanInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceScanInfo.name)
}
#endif
inline void DeviceScanInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceScanInfo.name)
}
inline void DeviceScanInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceScanInfo.name)
}
inline ::std::string* DeviceScanInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:DeviceScanInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceScanInfo::release_name() {
  // @@protoc_insertion_point(field_release:DeviceScanInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceScanInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DeviceScanInfo.name)
}

// .GenericFailure failure = 3;
inline bool DeviceScanInfo::has_failure() const {
  return this != internal_default_instance() && failure_ != NULL;
}
inline void DeviceScanInfo::clear_failure() {
  if (GetArenaNoVirtual() == NULL && failure_ != NULL) {
    delete failure_;
  }
  failure_ = NULL;
}
inline const ::GenericFailure& DeviceScanInfo::_internal_failure() const {
  return *failure_;
}
inline const ::GenericFailure& DeviceScanInfo::failure() const {
  const ::GenericFailure* p = failure_;
  // @@protoc_insertion_point(field_get:DeviceScanInfo.failure)
  return p != NULL ? *p : *reinterpret_cast<const ::GenericFailure*>(
      &::_GenericFailure_default_instance_);
}
inline ::GenericFailure* DeviceScanInfo::release_failure() {
  // @@protoc_insertion_point(field_release:DeviceScanInfo.failure)
  
  ::GenericFailure* temp = failure_;
  failure_ = NULL;
  return temp;
}
inline ::GenericFailure* DeviceScanInfo::mutable_failure() {
  
  if (failure_ == NULL) {
    auto* p = CreateMaybeMessage<::GenericFailure>(GetArenaNoVirtual());
    failure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DeviceScanInfo.failure)
  return failure_;
}
inline void DeviceScanInfo::set_allocated_failure(::GenericFailure* failure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete failure_;
  }
  if (failure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      failure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    
  } else {
    
  }
  failure_ = failure;
  // @@protoc_insertion_point(field_set_allocated:DeviceScanInfo.failure)
}

// repeated .ServiceDataEntry serviceData = 4;
inline int DeviceScanInfo::servicedata_size() const {
  return servicedata_.size();
}
inline void DeviceScanInfo::clear_servicedata() {
  servicedata_.Clear();
}
inline ::ServiceDataEntry* DeviceScanInfo::mutable_servicedata(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceScanInfo.serviceData)
  return servicedata_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServiceDataEntry >*
DeviceScanInfo::mutable_servicedata() {
  // @@protoc_insertion_point(field_mutable_list:DeviceScanInfo.serviceData)
  return &servicedata_;
}
inline const ::ServiceDataEntry& DeviceScanInfo::servicedata(int index) const {
  // @@protoc_insertion_point(field_get:DeviceScanInfo.serviceData)
  return servicedata_.Get(index);
}
inline ::ServiceDataEntry* DeviceScanInfo::add_servicedata() {
  // @@protoc_insertion_point(field_add:DeviceScanInfo.serviceData)
  return servicedata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServiceDataEntry >&
DeviceScanInfo::servicedata() const {
  // @@protoc_insertion_point(field_list:DeviceScanInfo.serviceData)
  return servicedata_;
}

// bytes manufacturerData = 6;
inline void DeviceScanInfo::clear_manufacturerdata() {
  manufacturerdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceScanInfo::manufacturerdata() const {
  // @@protoc_insertion_point(field_get:DeviceScanInfo.manufacturerData)
  return manufacturerdata_.GetNoArena();
}
inline void DeviceScanInfo::set_manufacturerdata(const ::std::string& value) {
  
  manufacturerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceScanInfo.manufacturerData)
}
#if LANG_CXX11
inline void DeviceScanInfo::set_manufacturerdata(::std::string&& value) {
  
  manufacturerdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceScanInfo.manufacturerData)
}
#endif
inline void DeviceScanInfo::set_manufacturerdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceScanInfo.manufacturerData)
}
inline void DeviceScanInfo::set_manufacturerdata(const void* value, size_t size) {
  
  manufacturerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceScanInfo.manufacturerData)
}
inline ::std::string* DeviceScanInfo::mutable_manufacturerdata() {
  
  // @@protoc_insertion_point(field_mutable:DeviceScanInfo.manufacturerData)
  return manufacturerdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceScanInfo::release_manufacturerdata() {
  // @@protoc_insertion_point(field_release:DeviceScanInfo.manufacturerData)
  
  return manufacturerdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceScanInfo::set_allocated_manufacturerdata(::std::string* manufacturerdata) {
  if (manufacturerdata != NULL) {
    
  } else {
    
  }
  manufacturerdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturerdata);
  // @@protoc_insertion_point(field_set_allocated:DeviceScanInfo.manufacturerData)
}

// repeated .Uuid serviceUuids = 7;
inline int DeviceScanInfo::serviceuuids_size() const {
  return serviceuuids_.size();
}
inline void DeviceScanInfo::clear_serviceuuids() {
  serviceuuids_.Clear();
}
inline ::Uuid* DeviceScanInfo::mutable_serviceuuids(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceScanInfo.serviceUuids)
  return serviceuuids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Uuid >*
DeviceScanInfo::mutable_serviceuuids() {
  // @@protoc_insertion_point(field_mutable_list:DeviceScanInfo.serviceUuids)
  return &serviceuuids_;
}
inline const ::Uuid& DeviceScanInfo::serviceuuids(int index) const {
  // @@protoc_insertion_point(field_get:DeviceScanInfo.serviceUuids)
  return serviceuuids_.Get(index);
}
inline ::Uuid* DeviceScanInfo::add_serviceuuids() {
  // @@protoc_insertion_point(field_add:DeviceScanInfo.serviceUuids)
  return serviceuuids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Uuid >&
DeviceScanInfo::serviceuuids() const {
  // @@protoc_insertion_point(field_list:DeviceScanInfo.serviceUuids)
  return serviceuuids_;
}

// int32 rssi = 5;
inline void DeviceScanInfo::clear_rssi() {
  rssi_ = 0;
}
inline ::google::protobuf::int32 DeviceScanInfo::rssi() const {
  // @@protoc_insertion_point(field_get:DeviceScanInfo.rssi)
  return rssi_;
}
inline void DeviceScanInfo::set_rssi(::google::protobuf::int32 value) {
  
  rssi_ = value;
  // @@protoc_insertion_point(field_set:DeviceScanInfo.rssi)
}

// -------------------------------------------------------------------

// ConnectToDeviceRequest

// string deviceId = 1;
inline void ConnectToDeviceRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectToDeviceRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:ConnectToDeviceRequest.deviceId)
  return deviceid_.GetNoArena();
}
inline void ConnectToDeviceRequest::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectToDeviceRequest.deviceId)
}
#if LANG_CXX11
inline void ConnectToDeviceRequest::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConnectToDeviceRequest.deviceId)
}
#endif
inline void ConnectToDeviceRequest::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectToDeviceRequest.deviceId)
}
inline void ConnectToDeviceRequest::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectToDeviceRequest.deviceId)
}
inline ::std::string* ConnectToDeviceRequest::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:ConnectToDeviceRequest.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectToDeviceRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:ConnectToDeviceRequest.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectToDeviceRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:ConnectToDeviceRequest.deviceId)
}

// .ServicesWithCharacteristics servicesWithCharacteristicsToDiscover = 2;
inline bool ConnectToDeviceRequest::has_serviceswithcharacteristicstodiscover() const {
  return this != internal_default_instance() && serviceswithcharacteristicstodiscover_ != NULL;
}
inline void ConnectToDeviceRequest::clear_serviceswithcharacteristicstodiscover() {
  if (GetArenaNoVirtual() == NULL && serviceswithcharacteristicstodiscover_ != NULL) {
    delete serviceswithcharacteristicstodiscover_;
  }
  serviceswithcharacteristicstodiscover_ = NULL;
}
inline const ::ServicesWithCharacteristics& ConnectToDeviceRequest::_internal_serviceswithcharacteristicstodiscover() const {
  return *serviceswithcharacteristicstodiscover_;
}
inline const ::ServicesWithCharacteristics& ConnectToDeviceRequest::serviceswithcharacteristicstodiscover() const {
  const ::ServicesWithCharacteristics* p = serviceswithcharacteristicstodiscover_;
  // @@protoc_insertion_point(field_get:ConnectToDeviceRequest.servicesWithCharacteristicsToDiscover)
  return p != NULL ? *p : *reinterpret_cast<const ::ServicesWithCharacteristics*>(
      &::_ServicesWithCharacteristics_default_instance_);
}
inline ::ServicesWithCharacteristics* ConnectToDeviceRequest::release_serviceswithcharacteristicstodiscover() {
  // @@protoc_insertion_point(field_release:ConnectToDeviceRequest.servicesWithCharacteristicsToDiscover)
  
  ::ServicesWithCharacteristics* temp = serviceswithcharacteristicstodiscover_;
  serviceswithcharacteristicstodiscover_ = NULL;
  return temp;
}
inline ::ServicesWithCharacteristics* ConnectToDeviceRequest::mutable_serviceswithcharacteristicstodiscover() {
  
  if (serviceswithcharacteristicstodiscover_ == NULL) {
    auto* p = CreateMaybeMessage<::ServicesWithCharacteristics>(GetArenaNoVirtual());
    serviceswithcharacteristicstodiscover_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConnectToDeviceRequest.servicesWithCharacteristicsToDiscover)
  return serviceswithcharacteristicstodiscover_;
}
inline void ConnectToDeviceRequest::set_allocated_serviceswithcharacteristicstodiscover(::ServicesWithCharacteristics* serviceswithcharacteristicstodiscover) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serviceswithcharacteristicstodiscover_;
  }
  if (serviceswithcharacteristicstodiscover) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serviceswithcharacteristicstodiscover = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serviceswithcharacteristicstodiscover, submessage_arena);
    }
    
  } else {
    
  }
  serviceswithcharacteristicstodiscover_ = serviceswithcharacteristicstodiscover;
  // @@protoc_insertion_point(field_set_allocated:ConnectToDeviceRequest.servicesWithCharacteristicsToDiscover)
}

// int32 timeoutInMs = 3;
inline void ConnectToDeviceRequest::clear_timeoutinms() {
  timeoutinms_ = 0;
}
inline ::google::protobuf::int32 ConnectToDeviceRequest::timeoutinms() const {
  // @@protoc_insertion_point(field_get:ConnectToDeviceRequest.timeoutInMs)
  return timeoutinms_;
}
inline void ConnectToDeviceRequest::set_timeoutinms(::google::protobuf::int32 value) {
  
  timeoutinms_ = value;
  // @@protoc_insertion_point(field_set:ConnectToDeviceRequest.timeoutInMs)
}

// -------------------------------------------------------------------

// DeviceInfo

// string id = 1;
inline void DeviceInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::id() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.id)
  return id_.GetNoArena();
}
inline void DeviceInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceInfo.id)
}
#if LANG_CXX11
inline void DeviceInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfo.id)
}
#endif
inline void DeviceInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfo.id)
}
inline void DeviceInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfo.id)
}
inline ::std::string* DeviceInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:DeviceInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_id() {
  // @@protoc_insertion_point(field_release:DeviceInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.id)
}

// int32 connectionState = 2;
inline void DeviceInfo::clear_connectionstate() {
  connectionstate_ = 0;
}
inline ::google::protobuf::int32 DeviceInfo::connectionstate() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.connectionState)
  return connectionstate_;
}
inline void DeviceInfo::set_connectionstate(::google::protobuf::int32 value) {
  
  connectionstate_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfo.connectionState)
}

// .GenericFailure failure = 3;
inline bool DeviceInfo::has_failure() const {
  return this != internal_default_instance() && failure_ != NULL;
}
inline void DeviceInfo::clear_failure() {
  if (GetArenaNoVirtual() == NULL && failure_ != NULL) {
    delete failure_;
  }
  failure_ = NULL;
}
inline const ::GenericFailure& DeviceInfo::_internal_failure() const {
  return *failure_;
}
inline const ::GenericFailure& DeviceInfo::failure() const {
  const ::GenericFailure* p = failure_;
  // @@protoc_insertion_point(field_get:DeviceInfo.failure)
  return p != NULL ? *p : *reinterpret_cast<const ::GenericFailure*>(
      &::_GenericFailure_default_instance_);
}
inline ::GenericFailure* DeviceInfo::release_failure() {
  // @@protoc_insertion_point(field_release:DeviceInfo.failure)
  
  ::GenericFailure* temp = failure_;
  failure_ = NULL;
  return temp;
}
inline ::GenericFailure* DeviceInfo::mutable_failure() {
  
  if (failure_ == NULL) {
    auto* p = CreateMaybeMessage<::GenericFailure>(GetArenaNoVirtual());
    failure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DeviceInfo.failure)
  return failure_;
}
inline void DeviceInfo::set_allocated_failure(::GenericFailure* failure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete failure_;
  }
  if (failure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      failure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    
  } else {
    
  }
  failure_ = failure;
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.failure)
}

// -------------------------------------------------------------------

// DisconnectFromDeviceRequest

// string deviceId = 1;
inline void DisconnectFromDeviceRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisconnectFromDeviceRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:DisconnectFromDeviceRequest.deviceId)
  return deviceid_.GetNoArena();
}
inline void DisconnectFromDeviceRequest::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DisconnectFromDeviceRequest.deviceId)
}
#if LANG_CXX11
inline void DisconnectFromDeviceRequest::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DisconnectFromDeviceRequest.deviceId)
}
#endif
inline void DisconnectFromDeviceRequest::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DisconnectFromDeviceRequest.deviceId)
}
inline void DisconnectFromDeviceRequest::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DisconnectFromDeviceRequest.deviceId)
}
inline ::std::string* DisconnectFromDeviceRequest::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:DisconnectFromDeviceRequest.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisconnectFromDeviceRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:DisconnectFromDeviceRequest.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisconnectFromDeviceRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:DisconnectFromDeviceRequest.deviceId)
}

// -------------------------------------------------------------------

// ClearGattCacheRequest

// string deviceId = 1;
inline void ClearGattCacheRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClearGattCacheRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:ClearGattCacheRequest.deviceId)
  return deviceid_.GetNoArena();
}
inline void ClearGattCacheRequest::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClearGattCacheRequest.deviceId)
}
#if LANG_CXX11
inline void ClearGattCacheRequest::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClearGattCacheRequest.deviceId)
}
#endif
inline void ClearGattCacheRequest::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClearGattCacheRequest.deviceId)
}
inline void ClearGattCacheRequest::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClearGattCacheRequest.deviceId)
}
inline ::std::string* ClearGattCacheRequest::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:ClearGattCacheRequest.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClearGattCacheRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:ClearGattCacheRequest.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClearGattCacheRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:ClearGattCacheRequest.deviceId)
}

// -------------------------------------------------------------------

// ClearGattCacheInfo

// .GenericFailure failure = 1;
inline bool ClearGattCacheInfo::has_failure() const {
  return this != internal_default_instance() && failure_ != NULL;
}
inline void ClearGattCacheInfo::clear_failure() {
  if (GetArenaNoVirtual() == NULL && failure_ != NULL) {
    delete failure_;
  }
  failure_ = NULL;
}
inline const ::GenericFailure& ClearGattCacheInfo::_internal_failure() const {
  return *failure_;
}
inline const ::GenericFailure& ClearGattCacheInfo::failure() const {
  const ::GenericFailure* p = failure_;
  // @@protoc_insertion_point(field_get:ClearGattCacheInfo.failure)
  return p != NULL ? *p : *reinterpret_cast<const ::GenericFailure*>(
      &::_GenericFailure_default_instance_);
}
inline ::GenericFailure* ClearGattCacheInfo::release_failure() {
  // @@protoc_insertion_point(field_release:ClearGattCacheInfo.failure)
  
  ::GenericFailure* temp = failure_;
  failure_ = NULL;
  return temp;
}
inline ::GenericFailure* ClearGattCacheInfo::mutable_failure() {
  
  if (failure_ == NULL) {
    auto* p = CreateMaybeMessage<::GenericFailure>(GetArenaNoVirtual());
    failure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ClearGattCacheInfo.failure)
  return failure_;
}
inline void ClearGattCacheInfo::set_allocated_failure(::GenericFailure* failure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete failure_;
  }
  if (failure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      failure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    
  } else {
    
  }
  failure_ = failure;
  // @@protoc_insertion_point(field_set_allocated:ClearGattCacheInfo.failure)
}

// -------------------------------------------------------------------

// NotifyCharacteristicRequest

// .CharacteristicAddress characteristic = 1;
inline bool NotifyCharacteristicRequest::has_characteristic() const {
  return this != internal_default_instance() && characteristic_ != NULL;
}
inline void NotifyCharacteristicRequest::clear_characteristic() {
  if (GetArenaNoVirtual() == NULL && characteristic_ != NULL) {
    delete characteristic_;
  }
  characteristic_ = NULL;
}
inline const ::CharacteristicAddress& NotifyCharacteristicRequest::_internal_characteristic() const {
  return *characteristic_;
}
inline const ::CharacteristicAddress& NotifyCharacteristicRequest::characteristic() const {
  const ::CharacteristicAddress* p = characteristic_;
  // @@protoc_insertion_point(field_get:NotifyCharacteristicRequest.characteristic)
  return p != NULL ? *p : *reinterpret_cast<const ::CharacteristicAddress*>(
      &::_CharacteristicAddress_default_instance_);
}
inline ::CharacteristicAddress* NotifyCharacteristicRequest::release_characteristic() {
  // @@protoc_insertion_point(field_release:NotifyCharacteristicRequest.characteristic)
  
  ::CharacteristicAddress* temp = characteristic_;
  characteristic_ = NULL;
  return temp;
}
inline ::CharacteristicAddress* NotifyCharacteristicRequest::mutable_characteristic() {
  
  if (characteristic_ == NULL) {
    auto* p = CreateMaybeMessage<::CharacteristicAddress>(GetArenaNoVirtual());
    characteristic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NotifyCharacteristicRequest.characteristic)
  return characteristic_;
}
inline void NotifyCharacteristicRequest::set_allocated_characteristic(::CharacteristicAddress* characteristic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete characteristic_;
  }
  if (characteristic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      characteristic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, characteristic, submessage_arena);
    }
    
  } else {
    
  }
  characteristic_ = characteristic;
  // @@protoc_insertion_point(field_set_allocated:NotifyCharacteristicRequest.characteristic)
}

// -------------------------------------------------------------------

// NotifyNoMoreCharacteristicRequest

// .CharacteristicAddress characteristic = 1;
inline bool NotifyNoMoreCharacteristicRequest::has_characteristic() const {
  return this != internal_default_instance() && characteristic_ != NULL;
}
inline void NotifyNoMoreCharacteristicRequest::clear_characteristic() {
  if (GetArenaNoVirtual() == NULL && characteristic_ != NULL) {
    delete characteristic_;
  }
  characteristic_ = NULL;
}
inline const ::CharacteristicAddress& NotifyNoMoreCharacteristicRequest::_internal_characteristic() const {
  return *characteristic_;
}
inline const ::CharacteristicAddress& NotifyNoMoreCharacteristicRequest::characteristic() const {
  const ::CharacteristicAddress* p = characteristic_;
  // @@protoc_insertion_point(field_get:NotifyNoMoreCharacteristicRequest.characteristic)
  return p != NULL ? *p : *reinterpret_cast<const ::CharacteristicAddress*>(
      &::_CharacteristicAddress_default_instance_);
}
inline ::CharacteristicAddress* NotifyNoMoreCharacteristicRequest::release_characteristic() {
  // @@protoc_insertion_point(field_release:NotifyNoMoreCharacteristicRequest.characteristic)
  
  ::CharacteristicAddress* temp = characteristic_;
  characteristic_ = NULL;
  return temp;
}
inline ::CharacteristicAddress* NotifyNoMoreCharacteristicRequest::mutable_characteristic() {
  
  if (characteristic_ == NULL) {
    auto* p = CreateMaybeMessage<::CharacteristicAddress>(GetArenaNoVirtual());
    characteristic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NotifyNoMoreCharacteristicRequest.characteristic)
  return characteristic_;
}
inline void NotifyNoMoreCharacteristicRequest::set_allocated_characteristic(::CharacteristicAddress* characteristic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete characteristic_;
  }
  if (characteristic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      characteristic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, characteristic, submessage_arena);
    }
    
  } else {
    
  }
  characteristic_ = characteristic;
  // @@protoc_insertion_point(field_set_allocated:NotifyNoMoreCharacteristicRequest.characteristic)
}

// -------------------------------------------------------------------

// ReadCharacteristicRequest

// .CharacteristicAddress characteristic = 1;
inline bool ReadCharacteristicRequest::has_characteristic() const {
  return this != internal_default_instance() && characteristic_ != NULL;
}
inline void ReadCharacteristicRequest::clear_characteristic() {
  if (GetArenaNoVirtual() == NULL && characteristic_ != NULL) {
    delete characteristic_;
  }
  characteristic_ = NULL;
}
inline const ::CharacteristicAddress& ReadCharacteristicRequest::_internal_characteristic() const {
  return *characteristic_;
}
inline const ::CharacteristicAddress& ReadCharacteristicRequest::characteristic() const {
  const ::CharacteristicAddress* p = characteristic_;
  // @@protoc_insertion_point(field_get:ReadCharacteristicRequest.characteristic)
  return p != NULL ? *p : *reinterpret_cast<const ::CharacteristicAddress*>(
      &::_CharacteristicAddress_default_instance_);
}
inline ::CharacteristicAddress* ReadCharacteristicRequest::release_characteristic() {
  // @@protoc_insertion_point(field_release:ReadCharacteristicRequest.characteristic)
  
  ::CharacteristicAddress* temp = characteristic_;
  characteristic_ = NULL;
  return temp;
}
inline ::CharacteristicAddress* ReadCharacteristicRequest::mutable_characteristic() {
  
  if (characteristic_ == NULL) {
    auto* p = CreateMaybeMessage<::CharacteristicAddress>(GetArenaNoVirtual());
    characteristic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReadCharacteristicRequest.characteristic)
  return characteristic_;
}
inline void ReadCharacteristicRequest::set_allocated_characteristic(::CharacteristicAddress* characteristic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete characteristic_;
  }
  if (characteristic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      characteristic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, characteristic, submessage_arena);
    }
    
  } else {
    
  }
  characteristic_ = characteristic;
  // @@protoc_insertion_point(field_set_allocated:ReadCharacteristicRequest.characteristic)
}

// -------------------------------------------------------------------

// CharacteristicValueInfo

// .CharacteristicAddress characteristic = 1;
inline bool CharacteristicValueInfo::has_characteristic() const {
  return this != internal_default_instance() && characteristic_ != NULL;
}
inline void CharacteristicValueInfo::clear_characteristic() {
  if (GetArenaNoVirtual() == NULL && characteristic_ != NULL) {
    delete characteristic_;
  }
  characteristic_ = NULL;
}
inline const ::CharacteristicAddress& CharacteristicValueInfo::_internal_characteristic() const {
  return *characteristic_;
}
inline const ::CharacteristicAddress& CharacteristicValueInfo::characteristic() const {
  const ::CharacteristicAddress* p = characteristic_;
  // @@protoc_insertion_point(field_get:CharacteristicValueInfo.characteristic)
  return p != NULL ? *p : *reinterpret_cast<const ::CharacteristicAddress*>(
      &::_CharacteristicAddress_default_instance_);
}
inline ::CharacteristicAddress* CharacteristicValueInfo::release_characteristic() {
  // @@protoc_insertion_point(field_release:CharacteristicValueInfo.characteristic)
  
  ::CharacteristicAddress* temp = characteristic_;
  characteristic_ = NULL;
  return temp;
}
inline ::CharacteristicAddress* CharacteristicValueInfo::mutable_characteristic() {
  
  if (characteristic_ == NULL) {
    auto* p = CreateMaybeMessage<::CharacteristicAddress>(GetArenaNoVirtual());
    characteristic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CharacteristicValueInfo.characteristic)
  return characteristic_;
}
inline void CharacteristicValueInfo::set_allocated_characteristic(::CharacteristicAddress* characteristic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete characteristic_;
  }
  if (characteristic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      characteristic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, characteristic, submessage_arena);
    }
    
  } else {
    
  }
  characteristic_ = characteristic;
  // @@protoc_insertion_point(field_set_allocated:CharacteristicValueInfo.characteristic)
}

// bytes value = 2;
inline void CharacteristicValueInfo::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CharacteristicValueInfo::value() const {
  // @@protoc_insertion_point(field_get:CharacteristicValueInfo.value)
  return value_.GetNoArena();
}
inline void CharacteristicValueInfo::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CharacteristicValueInfo.value)
}
#if LANG_CXX11
inline void CharacteristicValueInfo::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CharacteristicValueInfo.value)
}
#endif
inline void CharacteristicValueInfo::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CharacteristicValueInfo.value)
}
inline void CharacteristicValueInfo::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CharacteristicValueInfo.value)
}
inline ::std::string* CharacteristicValueInfo::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:CharacteristicValueInfo.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CharacteristicValueInfo::release_value() {
  // @@protoc_insertion_point(field_release:CharacteristicValueInfo.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CharacteristicValueInfo::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:CharacteristicValueInfo.value)
}

// .GenericFailure failure = 3;
inline bool CharacteristicValueInfo::has_failure() const {
  return this != internal_default_instance() && failure_ != NULL;
}
inline void CharacteristicValueInfo::clear_failure() {
  if (GetArenaNoVirtual() == NULL && failure_ != NULL) {
    delete failure_;
  }
  failure_ = NULL;
}
inline const ::GenericFailure& CharacteristicValueInfo::_internal_failure() const {
  return *failure_;
}
inline const ::GenericFailure& CharacteristicValueInfo::failure() const {
  const ::GenericFailure* p = failure_;
  // @@protoc_insertion_point(field_get:CharacteristicValueInfo.failure)
  return p != NULL ? *p : *reinterpret_cast<const ::GenericFailure*>(
      &::_GenericFailure_default_instance_);
}
inline ::GenericFailure* CharacteristicValueInfo::release_failure() {
  // @@protoc_insertion_point(field_release:CharacteristicValueInfo.failure)
  
  ::GenericFailure* temp = failure_;
  failure_ = NULL;
  return temp;
}
inline ::GenericFailure* CharacteristicValueInfo::mutable_failure() {
  
  if (failure_ == NULL) {
    auto* p = CreateMaybeMessage<::GenericFailure>(GetArenaNoVirtual());
    failure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CharacteristicValueInfo.failure)
  return failure_;
}
inline void CharacteristicValueInfo::set_allocated_failure(::GenericFailure* failure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete failure_;
  }
  if (failure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      failure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    
  } else {
    
  }
  failure_ = failure;
  // @@protoc_insertion_point(field_set_allocated:CharacteristicValueInfo.failure)
}

// -------------------------------------------------------------------

// WriteCharacteristicRequest

// .CharacteristicAddress characteristic = 1;
inline bool WriteCharacteristicRequest::has_characteristic() const {
  return this != internal_default_instance() && characteristic_ != NULL;
}
inline void WriteCharacteristicRequest::clear_characteristic() {
  if (GetArenaNoVirtual() == NULL && characteristic_ != NULL) {
    delete characteristic_;
  }
  characteristic_ = NULL;
}
inline const ::CharacteristicAddress& WriteCharacteristicRequest::_internal_characteristic() const {
  return *characteristic_;
}
inline const ::CharacteristicAddress& WriteCharacteristicRequest::characteristic() const {
  const ::CharacteristicAddress* p = characteristic_;
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.characteristic)
  return p != NULL ? *p : *reinterpret_cast<const ::CharacteristicAddress*>(
      &::_CharacteristicAddress_default_instance_);
}
inline ::CharacteristicAddress* WriteCharacteristicRequest::release_characteristic() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicRequest.characteristic)
  
  ::CharacteristicAddress* temp = characteristic_;
  characteristic_ = NULL;
  return temp;
}
inline ::CharacteristicAddress* WriteCharacteristicRequest::mutable_characteristic() {
  
  if (characteristic_ == NULL) {
    auto* p = CreateMaybeMessage<::CharacteristicAddress>(GetArenaNoVirtual());
    characteristic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicRequest.characteristic)
  return characteristic_;
}
inline void WriteCharacteristicRequest::set_allocated_characteristic(::CharacteristicAddress* characteristic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete characteristic_;
  }
  if (characteristic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      characteristic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, characteristic, submessage_arena);
    }
    
  } else {
    
  }
  characteristic_ = characteristic;
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicRequest.characteristic)
}

// bytes value = 2;
inline void WriteCharacteristicRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteCharacteristicRequest::value() const {
  // @@protoc_insertion_point(field_get:WriteCharacteristicRequest.value)
  return value_.GetNoArena();
}
inline void WriteCharacteristicRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteCharacteristicRequest.value)
}
#if LANG_CXX11
inline void WriteCharacteristicRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteCharacteristicRequest.value)
}
#endif
inline void WriteCharacteristicRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteCharacteristicRequest.value)
}
inline void WriteCharacteristicRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteCharacteristicRequest.value)
}
inline ::std::string* WriteCharacteristicRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteCharacteristicRequest::release_value() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteCharacteristicRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicRequest.value)
}

// -------------------------------------------------------------------

// WriteCharacteristicInfo

// .CharacteristicAddress characteristic = 1;
inline bool WriteCharacteristicInfo::has_characteristic() const {
  return this != internal_default_instance() && characteristic_ != NULL;
}
inline void WriteCharacteristicInfo::clear_characteristic() {
  if (GetArenaNoVirtual() == NULL && characteristic_ != NULL) {
    delete characteristic_;
  }
  characteristic_ = NULL;
}
inline const ::CharacteristicAddress& WriteCharacteristicInfo::_internal_characteristic() const {
  return *characteristic_;
}
inline const ::CharacteristicAddress& WriteCharacteristicInfo::characteristic() const {
  const ::CharacteristicAddress* p = characteristic_;
  // @@protoc_insertion_point(field_get:WriteCharacteristicInfo.characteristic)
  return p != NULL ? *p : *reinterpret_cast<const ::CharacteristicAddress*>(
      &::_CharacteristicAddress_default_instance_);
}
inline ::CharacteristicAddress* WriteCharacteristicInfo::release_characteristic() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicInfo.characteristic)
  
  ::CharacteristicAddress* temp = characteristic_;
  characteristic_ = NULL;
  return temp;
}
inline ::CharacteristicAddress* WriteCharacteristicInfo::mutable_characteristic() {
  
  if (characteristic_ == NULL) {
    auto* p = CreateMaybeMessage<::CharacteristicAddress>(GetArenaNoVirtual());
    characteristic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicInfo.characteristic)
  return characteristic_;
}
inline void WriteCharacteristicInfo::set_allocated_characteristic(::CharacteristicAddress* characteristic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete characteristic_;
  }
  if (characteristic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      characteristic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, characteristic, submessage_arena);
    }
    
  } else {
    
  }
  characteristic_ = characteristic;
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicInfo.characteristic)
}

// .GenericFailure failure = 3;
inline bool WriteCharacteristicInfo::has_failure() const {
  return this != internal_default_instance() && failure_ != NULL;
}
inline void WriteCharacteristicInfo::clear_failure() {
  if (GetArenaNoVirtual() == NULL && failure_ != NULL) {
    delete failure_;
  }
  failure_ = NULL;
}
inline const ::GenericFailure& WriteCharacteristicInfo::_internal_failure() const {
  return *failure_;
}
inline const ::GenericFailure& WriteCharacteristicInfo::failure() const {
  const ::GenericFailure* p = failure_;
  // @@protoc_insertion_point(field_get:WriteCharacteristicInfo.failure)
  return p != NULL ? *p : *reinterpret_cast<const ::GenericFailure*>(
      &::_GenericFailure_default_instance_);
}
inline ::GenericFailure* WriteCharacteristicInfo::release_failure() {
  // @@protoc_insertion_point(field_release:WriteCharacteristicInfo.failure)
  
  ::GenericFailure* temp = failure_;
  failure_ = NULL;
  return temp;
}
inline ::GenericFailure* WriteCharacteristicInfo::mutable_failure() {
  
  if (failure_ == NULL) {
    auto* p = CreateMaybeMessage<::GenericFailure>(GetArenaNoVirtual());
    failure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WriteCharacteristicInfo.failure)
  return failure_;
}
inline void WriteCharacteristicInfo::set_allocated_failure(::GenericFailure* failure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete failure_;
  }
  if (failure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      failure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    
  } else {
    
  }
  failure_ = failure;
  // @@protoc_insertion_point(field_set_allocated:WriteCharacteristicInfo.failure)
}

// -------------------------------------------------------------------

// NegotiateMtuRequest

// string deviceId = 1;
inline void NegotiateMtuRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NegotiateMtuRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:NegotiateMtuRequest.deviceId)
  return deviceid_.GetNoArena();
}
inline void NegotiateMtuRequest::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NegotiateMtuRequest.deviceId)
}
#if LANG_CXX11
inline void NegotiateMtuRequest::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NegotiateMtuRequest.deviceId)
}
#endif
inline void NegotiateMtuRequest::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NegotiateMtuRequest.deviceId)
}
inline void NegotiateMtuRequest::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NegotiateMtuRequest.deviceId)
}
inline ::std::string* NegotiateMtuRequest::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:NegotiateMtuRequest.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NegotiateMtuRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:NegotiateMtuRequest.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NegotiateMtuRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:NegotiateMtuRequest.deviceId)
}

// int32 mtuSize = 2;
inline void NegotiateMtuRequest::clear_mtusize() {
  mtusize_ = 0;
}
inline ::google::protobuf::int32 NegotiateMtuRequest::mtusize() const {
  // @@protoc_insertion_point(field_get:NegotiateMtuRequest.mtuSize)
  return mtusize_;
}
inline void NegotiateMtuRequest::set_mtusize(::google::protobuf::int32 value) {
  
  mtusize_ = value;
  // @@protoc_insertion_point(field_set:NegotiateMtuRequest.mtuSize)
}

// -------------------------------------------------------------------

// NegotiateMtuInfo

// string deviceId = 1;
inline void NegotiateMtuInfo::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NegotiateMtuInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:NegotiateMtuInfo.deviceId)
  return deviceid_.GetNoArena();
}
inline void NegotiateMtuInfo::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NegotiateMtuInfo.deviceId)
}
#if LANG_CXX11
inline void NegotiateMtuInfo::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NegotiateMtuInfo.deviceId)
}
#endif
inline void NegotiateMtuInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NegotiateMtuInfo.deviceId)
}
inline void NegotiateMtuInfo::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NegotiateMtuInfo.deviceId)
}
inline ::std::string* NegotiateMtuInfo::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:NegotiateMtuInfo.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NegotiateMtuInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:NegotiateMtuInfo.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NegotiateMtuInfo::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:NegotiateMtuInfo.deviceId)
}

// int32 mtuSize = 2;
inline void NegotiateMtuInfo::clear_mtusize() {
  mtusize_ = 0;
}
inline ::google::protobuf::int32 NegotiateMtuInfo::mtusize() const {
  // @@protoc_insertion_point(field_get:NegotiateMtuInfo.mtuSize)
  return mtusize_;
}
inline void NegotiateMtuInfo::set_mtusize(::google::protobuf::int32 value) {
  
  mtusize_ = value;
  // @@protoc_insertion_point(field_set:NegotiateMtuInfo.mtuSize)
}

// .GenericFailure failure = 3;
inline bool NegotiateMtuInfo::has_failure() const {
  return this != internal_default_instance() && failure_ != NULL;
}
inline void NegotiateMtuInfo::clear_failure() {
  if (GetArenaNoVirtual() == NULL && failure_ != NULL) {
    delete failure_;
  }
  failure_ = NULL;
}
inline const ::GenericFailure& NegotiateMtuInfo::_internal_failure() const {
  return *failure_;
}
inline const ::GenericFailure& NegotiateMtuInfo::failure() const {
  const ::GenericFailure* p = failure_;
  // @@protoc_insertion_point(field_get:NegotiateMtuInfo.failure)
  return p != NULL ? *p : *reinterpret_cast<const ::GenericFailure*>(
      &::_GenericFailure_default_instance_);
}
inline ::GenericFailure* NegotiateMtuInfo::release_failure() {
  // @@protoc_insertion_point(field_release:NegotiateMtuInfo.failure)
  
  ::GenericFailure* temp = failure_;
  failure_ = NULL;
  return temp;
}
inline ::GenericFailure* NegotiateMtuInfo::mutable_failure() {
  
  if (failure_ == NULL) {
    auto* p = CreateMaybeMessage<::GenericFailure>(GetArenaNoVirtual());
    failure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NegotiateMtuInfo.failure)
  return failure_;
}
inline void NegotiateMtuInfo::set_allocated_failure(::GenericFailure* failure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete failure_;
  }
  if (failure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      failure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    
  } else {
    
  }
  failure_ = failure;
  // @@protoc_insertion_point(field_set_allocated:NegotiateMtuInfo.failure)
}

// -------------------------------------------------------------------

// BleStatusInfo

// int32 status = 1;
inline void BleStatusInfo::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 BleStatusInfo::status() const {
  // @@protoc_insertion_point(field_get:BleStatusInfo.status)
  return status_;
}
inline void BleStatusInfo::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:BleStatusInfo.status)
}

// -------------------------------------------------------------------

// ChangeConnectionPriorityRequest

// string deviceId = 1;
inline void ChangeConnectionPriorityRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeConnectionPriorityRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:ChangeConnectionPriorityRequest.deviceId)
  return deviceid_.GetNoArena();
}
inline void ChangeConnectionPriorityRequest::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChangeConnectionPriorityRequest.deviceId)
}
#if LANG_CXX11
inline void ChangeConnectionPriorityRequest::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChangeConnectionPriorityRequest.deviceId)
}
#endif
inline void ChangeConnectionPriorityRequest::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChangeConnectionPriorityRequest.deviceId)
}
inline void ChangeConnectionPriorityRequest::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChangeConnectionPriorityRequest.deviceId)
}
inline ::std::string* ChangeConnectionPriorityRequest::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:ChangeConnectionPriorityRequest.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeConnectionPriorityRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:ChangeConnectionPriorityRequest.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeConnectionPriorityRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:ChangeConnectionPriorityRequest.deviceId)
}

// int32 priority = 2;
inline void ChangeConnectionPriorityRequest::clear_priority() {
  priority_ = 0;
}
inline ::google::protobuf::int32 ChangeConnectionPriorityRequest::priority() const {
  // @@protoc_insertion_point(field_get:ChangeConnectionPriorityRequest.priority)
  return priority_;
}
inline void ChangeConnectionPriorityRequest::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:ChangeConnectionPriorityRequest.priority)
}

// -------------------------------------------------------------------

// ChangeConnectionPriorityInfo

// string deviceId = 1;
inline void ChangeConnectionPriorityInfo::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeConnectionPriorityInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:ChangeConnectionPriorityInfo.deviceId)
  return deviceid_.GetNoArena();
}
inline void ChangeConnectionPriorityInfo::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChangeConnectionPriorityInfo.deviceId)
}
#if LANG_CXX11
inline void ChangeConnectionPriorityInfo::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChangeConnectionPriorityInfo.deviceId)
}
#endif
inline void ChangeConnectionPriorityInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChangeConnectionPriorityInfo.deviceId)
}
inline void ChangeConnectionPriorityInfo::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChangeConnectionPriorityInfo.deviceId)
}
inline ::std::string* ChangeConnectionPriorityInfo::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:ChangeConnectionPriorityInfo.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeConnectionPriorityInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:ChangeConnectionPriorityInfo.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeConnectionPriorityInfo::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:ChangeConnectionPriorityInfo.deviceId)
}

// .GenericFailure failure = 2;
inline bool ChangeConnectionPriorityInfo::has_failure() const {
  return this != internal_default_instance() && failure_ != NULL;
}
inline void ChangeConnectionPriorityInfo::clear_failure() {
  if (GetArenaNoVirtual() == NULL && failure_ != NULL) {
    delete failure_;
  }
  failure_ = NULL;
}
inline const ::GenericFailure& ChangeConnectionPriorityInfo::_internal_failure() const {
  return *failure_;
}
inline const ::GenericFailure& ChangeConnectionPriorityInfo::failure() const {
  const ::GenericFailure* p = failure_;
  // @@protoc_insertion_point(field_get:ChangeConnectionPriorityInfo.failure)
  return p != NULL ? *p : *reinterpret_cast<const ::GenericFailure*>(
      &::_GenericFailure_default_instance_);
}
inline ::GenericFailure* ChangeConnectionPriorityInfo::release_failure() {
  // @@protoc_insertion_point(field_release:ChangeConnectionPriorityInfo.failure)
  
  ::GenericFailure* temp = failure_;
  failure_ = NULL;
  return temp;
}
inline ::GenericFailure* ChangeConnectionPriorityInfo::mutable_failure() {
  
  if (failure_ == NULL) {
    auto* p = CreateMaybeMessage<::GenericFailure>(GetArenaNoVirtual());
    failure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ChangeConnectionPriorityInfo.failure)
  return failure_;
}
inline void ChangeConnectionPriorityInfo::set_allocated_failure(::GenericFailure* failure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete failure_;
  }
  if (failure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      failure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    
  } else {
    
  }
  failure_ = failure;
  // @@protoc_insertion_point(field_set_allocated:ChangeConnectionPriorityInfo.failure)
}

// -------------------------------------------------------------------

// CharacteristicAddress

// string deviceId = 1;
inline void CharacteristicAddress::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CharacteristicAddress::deviceid() const {
  // @@protoc_insertion_point(field_get:CharacteristicAddress.deviceId)
  return deviceid_.GetNoArena();
}
inline void CharacteristicAddress::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CharacteristicAddress.deviceId)
}
#if LANG_CXX11
inline void CharacteristicAddress::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CharacteristicAddress.deviceId)
}
#endif
inline void CharacteristicAddress::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CharacteristicAddress.deviceId)
}
inline void CharacteristicAddress::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CharacteristicAddress.deviceId)
}
inline ::std::string* CharacteristicAddress::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:CharacteristicAddress.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CharacteristicAddress::release_deviceid() {
  // @@protoc_insertion_point(field_release:CharacteristicAddress.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CharacteristicAddress::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:CharacteristicAddress.deviceId)
}

// .Uuid serviceUuid = 2;
inline bool CharacteristicAddress::has_serviceuuid() const {
  return this != internal_default_instance() && serviceuuid_ != NULL;
}
inline void CharacteristicAddress::clear_serviceuuid() {
  if (GetArenaNoVirtual() == NULL && serviceuuid_ != NULL) {
    delete serviceuuid_;
  }
  serviceuuid_ = NULL;
}
inline const ::Uuid& CharacteristicAddress::_internal_serviceuuid() const {
  return *serviceuuid_;
}
inline const ::Uuid& CharacteristicAddress::serviceuuid() const {
  const ::Uuid* p = serviceuuid_;
  // @@protoc_insertion_point(field_get:CharacteristicAddress.serviceUuid)
  return p != NULL ? *p : *reinterpret_cast<const ::Uuid*>(
      &::_Uuid_default_instance_);
}
inline ::Uuid* CharacteristicAddress::release_serviceuuid() {
  // @@protoc_insertion_point(field_release:CharacteristicAddress.serviceUuid)
  
  ::Uuid* temp = serviceuuid_;
  serviceuuid_ = NULL;
  return temp;
}
inline ::Uuid* CharacteristicAddress::mutable_serviceuuid() {
  
  if (serviceuuid_ == NULL) {
    auto* p = CreateMaybeMessage<::Uuid>(GetArenaNoVirtual());
    serviceuuid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CharacteristicAddress.serviceUuid)
  return serviceuuid_;
}
inline void CharacteristicAddress::set_allocated_serviceuuid(::Uuid* serviceuuid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serviceuuid_;
  }
  if (serviceuuid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serviceuuid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serviceuuid, submessage_arena);
    }
    
  } else {
    
  }
  serviceuuid_ = serviceuuid;
  // @@protoc_insertion_point(field_set_allocated:CharacteristicAddress.serviceUuid)
}

// .Uuid characteristicUuid = 3;
inline bool CharacteristicAddress::has_characteristicuuid() const {
  return this != internal_default_instance() && characteristicuuid_ != NULL;
}
inline void CharacteristicAddress::clear_characteristicuuid() {
  if (GetArenaNoVirtual() == NULL && characteristicuuid_ != NULL) {
    delete characteristicuuid_;
  }
  characteristicuuid_ = NULL;
}
inline const ::Uuid& CharacteristicAddress::_internal_characteristicuuid() const {
  return *characteristicuuid_;
}
inline const ::Uuid& CharacteristicAddress::characteristicuuid() const {
  const ::Uuid* p = characteristicuuid_;
  // @@protoc_insertion_point(field_get:CharacteristicAddress.characteristicUuid)
  return p != NULL ? *p : *reinterpret_cast<const ::Uuid*>(
      &::_Uuid_default_instance_);
}
inline ::Uuid* CharacteristicAddress::release_characteristicuuid() {
  // @@protoc_insertion_point(field_release:CharacteristicAddress.characteristicUuid)
  
  ::Uuid* temp = characteristicuuid_;
  characteristicuuid_ = NULL;
  return temp;
}
inline ::Uuid* CharacteristicAddress::mutable_characteristicuuid() {
  
  if (characteristicuuid_ == NULL) {
    auto* p = CreateMaybeMessage<::Uuid>(GetArenaNoVirtual());
    characteristicuuid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CharacteristicAddress.characteristicUuid)
  return characteristicuuid_;
}
inline void CharacteristicAddress::set_allocated_characteristicuuid(::Uuid* characteristicuuid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete characteristicuuid_;
  }
  if (characteristicuuid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      characteristicuuid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, characteristicuuid, submessage_arena);
    }
    
  } else {
    
  }
  characteristicuuid_ = characteristicuuid;
  // @@protoc_insertion_point(field_set_allocated:CharacteristicAddress.characteristicUuid)
}

// -------------------------------------------------------------------

// ServiceDataEntry

// .Uuid serviceUuid = 1;
inline bool ServiceDataEntry::has_serviceuuid() const {
  return this != internal_default_instance() && serviceuuid_ != NULL;
}
inline void ServiceDataEntry::clear_serviceuuid() {
  if (GetArenaNoVirtual() == NULL && serviceuuid_ != NULL) {
    delete serviceuuid_;
  }
  serviceuuid_ = NULL;
}
inline const ::Uuid& ServiceDataEntry::_internal_serviceuuid() const {
  return *serviceuuid_;
}
inline const ::Uuid& ServiceDataEntry::serviceuuid() const {
  const ::Uuid* p = serviceuuid_;
  // @@protoc_insertion_point(field_get:ServiceDataEntry.serviceUuid)
  return p != NULL ? *p : *reinterpret_cast<const ::Uuid*>(
      &::_Uuid_default_instance_);
}
inline ::Uuid* ServiceDataEntry::release_serviceuuid() {
  // @@protoc_insertion_point(field_release:ServiceDataEntry.serviceUuid)
  
  ::Uuid* temp = serviceuuid_;
  serviceuuid_ = NULL;
  return temp;
}
inline ::Uuid* ServiceDataEntry::mutable_serviceuuid() {
  
  if (serviceuuid_ == NULL) {
    auto* p = CreateMaybeMessage<::Uuid>(GetArenaNoVirtual());
    serviceuuid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ServiceDataEntry.serviceUuid)
  return serviceuuid_;
}
inline void ServiceDataEntry::set_allocated_serviceuuid(::Uuid* serviceuuid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serviceuuid_;
  }
  if (serviceuuid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serviceuuid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serviceuuid, submessage_arena);
    }
    
  } else {
    
  }
  serviceuuid_ = serviceuuid;
  // @@protoc_insertion_point(field_set_allocated:ServiceDataEntry.serviceUuid)
}

// bytes data = 2;
inline void ServiceDataEntry::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceDataEntry::data() const {
  // @@protoc_insertion_point(field_get:ServiceDataEntry.data)
  return data_.GetNoArena();
}
inline void ServiceDataEntry::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceDataEntry.data)
}
#if LANG_CXX11
inline void ServiceDataEntry::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceDataEntry.data)
}
#endif
inline void ServiceDataEntry::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceDataEntry.data)
}
inline void ServiceDataEntry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceDataEntry.data)
}
inline ::std::string* ServiceDataEntry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ServiceDataEntry.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceDataEntry::release_data() {
  // @@protoc_insertion_point(field_release:ServiceDataEntry.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceDataEntry::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ServiceDataEntry.data)
}

// -------------------------------------------------------------------

// ServicesWithCharacteristics

// repeated .ServiceWithCharacteristics items = 1;
inline int ServicesWithCharacteristics::items_size() const {
  return items_.size();
}
inline void ServicesWithCharacteristics::clear_items() {
  items_.Clear();
}
inline ::ServiceWithCharacteristics* ServicesWithCharacteristics::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ServicesWithCharacteristics.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServiceWithCharacteristics >*
ServicesWithCharacteristics::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ServicesWithCharacteristics.items)
  return &items_;
}
inline const ::ServiceWithCharacteristics& ServicesWithCharacteristics::items(int index) const {
  // @@protoc_insertion_point(field_get:ServicesWithCharacteristics.items)
  return items_.Get(index);
}
inline ::ServiceWithCharacteristics* ServicesWithCharacteristics::add_items() {
  // @@protoc_insertion_point(field_add:ServicesWithCharacteristics.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServiceWithCharacteristics >&
ServicesWithCharacteristics::items() const {
  // @@protoc_insertion_point(field_list:ServicesWithCharacteristics.items)
  return items_;
}

// -------------------------------------------------------------------

// ServiceWithCharacteristics

// .Uuid serviceId = 1;
inline bool ServiceWithCharacteristics::has_serviceid() const {
  return this != internal_default_instance() && serviceid_ != NULL;
}
inline void ServiceWithCharacteristics::clear_serviceid() {
  if (GetArenaNoVirtual() == NULL && serviceid_ != NULL) {
    delete serviceid_;
  }
  serviceid_ = NULL;
}
inline const ::Uuid& ServiceWithCharacteristics::_internal_serviceid() const {
  return *serviceid_;
}
inline const ::Uuid& ServiceWithCharacteristics::serviceid() const {
  const ::Uuid* p = serviceid_;
  // @@protoc_insertion_point(field_get:ServiceWithCharacteristics.serviceId)
  return p != NULL ? *p : *reinterpret_cast<const ::Uuid*>(
      &::_Uuid_default_instance_);
}
inline ::Uuid* ServiceWithCharacteristics::release_serviceid() {
  // @@protoc_insertion_point(field_release:ServiceWithCharacteristics.serviceId)
  
  ::Uuid* temp = serviceid_;
  serviceid_ = NULL;
  return temp;
}
inline ::Uuid* ServiceWithCharacteristics::mutable_serviceid() {
  
  if (serviceid_ == NULL) {
    auto* p = CreateMaybeMessage<::Uuid>(GetArenaNoVirtual());
    serviceid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ServiceWithCharacteristics.serviceId)
  return serviceid_;
}
inline void ServiceWithCharacteristics::set_allocated_serviceid(::Uuid* serviceid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serviceid_;
  }
  if (serviceid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serviceid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serviceid, submessage_arena);
    }
    
  } else {
    
  }
  serviceid_ = serviceid;
  // @@protoc_insertion_point(field_set_allocated:ServiceWithCharacteristics.serviceId)
}

// repeated .Uuid characteristics = 2;
inline int ServiceWithCharacteristics::characteristics_size() const {
  return characteristics_.size();
}
inline void ServiceWithCharacteristics::clear_characteristics() {
  characteristics_.Clear();
}
inline ::Uuid* ServiceWithCharacteristics::mutable_characteristics(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceWithCharacteristics.characteristics)
  return characteristics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Uuid >*
ServiceWithCharacteristics::mutable_characteristics() {
  // @@protoc_insertion_point(field_mutable_list:ServiceWithCharacteristics.characteristics)
  return &characteristics_;
}
inline const ::Uuid& ServiceWithCharacteristics::characteristics(int index) const {
  // @@protoc_insertion_point(field_get:ServiceWithCharacteristics.characteristics)
  return characteristics_.Get(index);
}
inline ::Uuid* ServiceWithCharacteristics::add_characteristics() {
  // @@protoc_insertion_point(field_add:ServiceWithCharacteristics.characteristics)
  return characteristics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Uuid >&
ServiceWithCharacteristics::characteristics() const {
  // @@protoc_insertion_point(field_list:ServiceWithCharacteristics.characteristics)
  return characteristics_;
}

// -------------------------------------------------------------------

// DiscoverServicesRequest

// string deviceId = 1;
inline void DiscoverServicesRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiscoverServicesRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:DiscoverServicesRequest.deviceId)
  return deviceid_.GetNoArena();
}
inline void DiscoverServicesRequest::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DiscoverServicesRequest.deviceId)
}
#if LANG_CXX11
inline void DiscoverServicesRequest::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DiscoverServicesRequest.deviceId)
}
#endif
inline void DiscoverServicesRequest::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DiscoverServicesRequest.deviceId)
}
inline void DiscoverServicesRequest::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DiscoverServicesRequest.deviceId)
}
inline ::std::string* DiscoverServicesRequest::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:DiscoverServicesRequest.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiscoverServicesRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:DiscoverServicesRequest.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoverServicesRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:DiscoverServicesRequest.deviceId)
}

// -------------------------------------------------------------------

// DiscoverServicesInfo

// string deviceId = 1;
inline void DiscoverServicesInfo::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiscoverServicesInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:DiscoverServicesInfo.deviceId)
  return deviceid_.GetNoArena();
}
inline void DiscoverServicesInfo::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DiscoverServicesInfo.deviceId)
}
#if LANG_CXX11
inline void DiscoverServicesInfo::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DiscoverServicesInfo.deviceId)
}
#endif
inline void DiscoverServicesInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DiscoverServicesInfo.deviceId)
}
inline void DiscoverServicesInfo::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DiscoverServicesInfo.deviceId)
}
inline ::std::string* DiscoverServicesInfo::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:DiscoverServicesInfo.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiscoverServicesInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:DiscoverServicesInfo.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoverServicesInfo::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:DiscoverServicesInfo.deviceId)
}

// repeated .DiscoveredService services = 2;
inline int DiscoverServicesInfo::services_size() const {
  return services_.size();
}
inline void DiscoverServicesInfo::clear_services() {
  services_.Clear();
}
inline ::DiscoveredService* DiscoverServicesInfo::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:DiscoverServicesInfo.services)
  return services_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::DiscoveredService >*
DiscoverServicesInfo::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:DiscoverServicesInfo.services)
  return &services_;
}
inline const ::DiscoveredService& DiscoverServicesInfo::services(int index) const {
  // @@protoc_insertion_point(field_get:DiscoverServicesInfo.services)
  return services_.Get(index);
}
inline ::DiscoveredService* DiscoverServicesInfo::add_services() {
  // @@protoc_insertion_point(field_add:DiscoverServicesInfo.services)
  return services_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DiscoveredService >&
DiscoverServicesInfo::services() const {
  // @@protoc_insertion_point(field_list:DiscoverServicesInfo.services)
  return services_;
}

// -------------------------------------------------------------------

// DiscoveredService

// .Uuid serviceUuid = 1;
inline bool DiscoveredService::has_serviceuuid() const {
  return this != internal_default_instance() && serviceuuid_ != NULL;
}
inline void DiscoveredService::clear_serviceuuid() {
  if (GetArenaNoVirtual() == NULL && serviceuuid_ != NULL) {
    delete serviceuuid_;
  }
  serviceuuid_ = NULL;
}
inline const ::Uuid& DiscoveredService::_internal_serviceuuid() const {
  return *serviceuuid_;
}
inline const ::Uuid& DiscoveredService::serviceuuid() const {
  const ::Uuid* p = serviceuuid_;
  // @@protoc_insertion_point(field_get:DiscoveredService.serviceUuid)
  return p != NULL ? *p : *reinterpret_cast<const ::Uuid*>(
      &::_Uuid_default_instance_);
}
inline ::Uuid* DiscoveredService::release_serviceuuid() {
  // @@protoc_insertion_point(field_release:DiscoveredService.serviceUuid)
  
  ::Uuid* temp = serviceuuid_;
  serviceuuid_ = NULL;
  return temp;
}
inline ::Uuid* DiscoveredService::mutable_serviceuuid() {
  
  if (serviceuuid_ == NULL) {
    auto* p = CreateMaybeMessage<::Uuid>(GetArenaNoVirtual());
    serviceuuid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DiscoveredService.serviceUuid)
  return serviceuuid_;
}
inline void DiscoveredService::set_allocated_serviceuuid(::Uuid* serviceuuid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serviceuuid_;
  }
  if (serviceuuid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serviceuuid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serviceuuid, submessage_arena);
    }
    
  } else {
    
  }
  serviceuuid_ = serviceuuid;
  // @@protoc_insertion_point(field_set_allocated:DiscoveredService.serviceUuid)
}

// repeated .Uuid characteristicUuids = 2;
inline int DiscoveredService::characteristicuuids_size() const {
  return characteristicuuids_.size();
}
inline void DiscoveredService::clear_characteristicuuids() {
  characteristicuuids_.Clear();
}
inline ::Uuid* DiscoveredService::mutable_characteristicuuids(int index) {
  // @@protoc_insertion_point(field_mutable:DiscoveredService.characteristicUuids)
  return characteristicuuids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Uuid >*
DiscoveredService::mutable_characteristicuuids() {
  // @@protoc_insertion_point(field_mutable_list:DiscoveredService.characteristicUuids)
  return &characteristicuuids_;
}
inline const ::Uuid& DiscoveredService::characteristicuuids(int index) const {
  // @@protoc_insertion_point(field_get:DiscoveredService.characteristicUuids)
  return characteristicuuids_.Get(index);
}
inline ::Uuid* DiscoveredService::add_characteristicuuids() {
  // @@protoc_insertion_point(field_add:DiscoveredService.characteristicUuids)
  return characteristicuuids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Uuid >&
DiscoveredService::characteristicuuids() const {
  // @@protoc_insertion_point(field_list:DiscoveredService.characteristicUuids)
  return characteristicuuids_;
}

// repeated .DiscoveredService includedServices = 3;
inline int DiscoveredService::includedservices_size() const {
  return includedservices_.size();
}
inline void DiscoveredService::clear_includedservices() {
  includedservices_.Clear();
}
inline ::DiscoveredService* DiscoveredService::mutable_includedservices(int index) {
  // @@protoc_insertion_point(field_mutable:DiscoveredService.includedServices)
  return includedservices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::DiscoveredService >*
DiscoveredService::mutable_includedservices() {
  // @@protoc_insertion_point(field_mutable_list:DiscoveredService.includedServices)
  return &includedservices_;
}
inline const ::DiscoveredService& DiscoveredService::includedservices(int index) const {
  // @@protoc_insertion_point(field_get:DiscoveredService.includedServices)
  return includedservices_.Get(index);
}
inline ::DiscoveredService* DiscoveredService::add_includedservices() {
  // @@protoc_insertion_point(field_add:DiscoveredService.includedServices)
  return includedservices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DiscoveredService >&
DiscoveredService::includedservices() const {
  // @@protoc_insertion_point(field_list:DiscoveredService.includedServices)
  return includedservices_;
}

// repeated .DiscoveredCharacteristic characteristics = 4;
inline int DiscoveredService::characteristics_size() const {
  return characteristics_.size();
}
inline void DiscoveredService::clear_characteristics() {
  characteristics_.Clear();
}
inline ::DiscoveredCharacteristic* DiscoveredService::mutable_characteristics(int index) {
  // @@protoc_insertion_point(field_mutable:DiscoveredService.characteristics)
  return characteristics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::DiscoveredCharacteristic >*
DiscoveredService::mutable_characteristics() {
  // @@protoc_insertion_point(field_mutable_list:DiscoveredService.characteristics)
  return &characteristics_;
}
inline const ::DiscoveredCharacteristic& DiscoveredService::characteristics(int index) const {
  // @@protoc_insertion_point(field_get:DiscoveredService.characteristics)
  return characteristics_.Get(index);
}
inline ::DiscoveredCharacteristic* DiscoveredService::add_characteristics() {
  // @@protoc_insertion_point(field_add:DiscoveredService.characteristics)
  return characteristics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DiscoveredCharacteristic >&
DiscoveredService::characteristics() const {
  // @@protoc_insertion_point(field_list:DiscoveredService.characteristics)
  return characteristics_;
}

// -------------------------------------------------------------------

// DiscoveredCharacteristic

// .Uuid characteristicId = 1;
inline bool DiscoveredCharacteristic::has_characteristicid() const {
  return this != internal_default_instance() && characteristicid_ != NULL;
}
inline void DiscoveredCharacteristic::clear_characteristicid() {
  if (GetArenaNoVirtual() == NULL && characteristicid_ != NULL) {
    delete characteristicid_;
  }
  characteristicid_ = NULL;
}
inline const ::Uuid& DiscoveredCharacteristic::_internal_characteristicid() const {
  return *characteristicid_;
}
inline const ::Uuid& DiscoveredCharacteristic::characteristicid() const {
  const ::Uuid* p = characteristicid_;
  // @@protoc_insertion_point(field_get:DiscoveredCharacteristic.characteristicId)
  return p != NULL ? *p : *reinterpret_cast<const ::Uuid*>(
      &::_Uuid_default_instance_);
}
inline ::Uuid* DiscoveredCharacteristic::release_characteristicid() {
  // @@protoc_insertion_point(field_release:DiscoveredCharacteristic.characteristicId)
  
  ::Uuid* temp = characteristicid_;
  characteristicid_ = NULL;
  return temp;
}
inline ::Uuid* DiscoveredCharacteristic::mutable_characteristicid() {
  
  if (characteristicid_ == NULL) {
    auto* p = CreateMaybeMessage<::Uuid>(GetArenaNoVirtual());
    characteristicid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DiscoveredCharacteristic.characteristicId)
  return characteristicid_;
}
inline void DiscoveredCharacteristic::set_allocated_characteristicid(::Uuid* characteristicid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete characteristicid_;
  }
  if (characteristicid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      characteristicid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, characteristicid, submessage_arena);
    }
    
  } else {
    
  }
  characteristicid_ = characteristicid;
  // @@protoc_insertion_point(field_set_allocated:DiscoveredCharacteristic.characteristicId)
}

// .Uuid serviceId = 2;
inline bool DiscoveredCharacteristic::has_serviceid() const {
  return this != internal_default_instance() && serviceid_ != NULL;
}
inline void DiscoveredCharacteristic::clear_serviceid() {
  if (GetArenaNoVirtual() == NULL && serviceid_ != NULL) {
    delete serviceid_;
  }
  serviceid_ = NULL;
}
inline const ::Uuid& DiscoveredCharacteristic::_internal_serviceid() const {
  return *serviceid_;
}
inline const ::Uuid& DiscoveredCharacteristic::serviceid() const {
  const ::Uuid* p = serviceid_;
  // @@protoc_insertion_point(field_get:DiscoveredCharacteristic.serviceId)
  return p != NULL ? *p : *reinterpret_cast<const ::Uuid*>(
      &::_Uuid_default_instance_);
}
inline ::Uuid* DiscoveredCharacteristic::release_serviceid() {
  // @@protoc_insertion_point(field_release:DiscoveredCharacteristic.serviceId)
  
  ::Uuid* temp = serviceid_;
  serviceid_ = NULL;
  return temp;
}
inline ::Uuid* DiscoveredCharacteristic::mutable_serviceid() {
  
  if (serviceid_ == NULL) {
    auto* p = CreateMaybeMessage<::Uuid>(GetArenaNoVirtual());
    serviceid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DiscoveredCharacteristic.serviceId)
  return serviceid_;
}
inline void DiscoveredCharacteristic::set_allocated_serviceid(::Uuid* serviceid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serviceid_;
  }
  if (serviceid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serviceid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serviceid, submessage_arena);
    }
    
  } else {
    
  }
  serviceid_ = serviceid;
  // @@protoc_insertion_point(field_set_allocated:DiscoveredCharacteristic.serviceId)
}

// bool isReadable = 3;
inline void DiscoveredCharacteristic::clear_isreadable() {
  isreadable_ = false;
}
inline bool DiscoveredCharacteristic::isreadable() const {
  // @@protoc_insertion_point(field_get:DiscoveredCharacteristic.isReadable)
  return isreadable_;
}
inline void DiscoveredCharacteristic::set_isreadable(bool value) {
  
  isreadable_ = value;
  // @@protoc_insertion_point(field_set:DiscoveredCharacteristic.isReadable)
}

// bool isWritableWithResponse = 4;
inline void DiscoveredCharacteristic::clear_iswritablewithresponse() {
  iswritablewithresponse_ = false;
}
inline bool DiscoveredCharacteristic::iswritablewithresponse() const {
  // @@protoc_insertion_point(field_get:DiscoveredCharacteristic.isWritableWithResponse)
  return iswritablewithresponse_;
}
inline void DiscoveredCharacteristic::set_iswritablewithresponse(bool value) {
  
  iswritablewithresponse_ = value;
  // @@protoc_insertion_point(field_set:DiscoveredCharacteristic.isWritableWithResponse)
}

// bool isWritableWithoutResponse = 5;
inline void DiscoveredCharacteristic::clear_iswritablewithoutresponse() {
  iswritablewithoutresponse_ = false;
}
inline bool DiscoveredCharacteristic::iswritablewithoutresponse() const {
  // @@protoc_insertion_point(field_get:DiscoveredCharacteristic.isWritableWithoutResponse)
  return iswritablewithoutresponse_;
}
inline void DiscoveredCharacteristic::set_iswritablewithoutresponse(bool value) {
  
  iswritablewithoutresponse_ = value;
  // @@protoc_insertion_point(field_set:DiscoveredCharacteristic.isWritableWithoutResponse)
}

// bool isNotifiable = 6;
inline void DiscoveredCharacteristic::clear_isnotifiable() {
  isnotifiable_ = false;
}
inline bool DiscoveredCharacteristic::isnotifiable() const {
  // @@protoc_insertion_point(field_get:DiscoveredCharacteristic.isNotifiable)
  return isnotifiable_;
}
inline void DiscoveredCharacteristic::set_isnotifiable(bool value) {
  
  isnotifiable_ = value;
  // @@protoc_insertion_point(field_set:DiscoveredCharacteristic.isNotifiable)
}

// bool isIndicatable = 7;
inline void DiscoveredCharacteristic::clear_isindicatable() {
  isindicatable_ = false;
}
inline bool DiscoveredCharacteristic::isindicatable() const {
  // @@protoc_insertion_point(field_get:DiscoveredCharacteristic.isIndicatable)
  return isindicatable_;
}
inline void DiscoveredCharacteristic::set_isindicatable(bool value) {
  
  isindicatable_ = value;
  // @@protoc_insertion_point(field_set:DiscoveredCharacteristic.isIndicatable)
}

// -------------------------------------------------------------------

// Uuid

// bytes data = 1;
inline void Uuid::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Uuid::data() const {
  // @@protoc_insertion_point(field_get:Uuid.data)
  return data_.GetNoArena();
}
inline void Uuid::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Uuid.data)
}
#if LANG_CXX11
inline void Uuid::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Uuid.data)
}
#endif
inline void Uuid::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Uuid.data)
}
inline void Uuid::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Uuid.data)
}
inline ::std::string* Uuid::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Uuid.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uuid::release_data() {
  // @@protoc_insertion_point(field_release:Uuid.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uuid::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Uuid.data)
}

// -------------------------------------------------------------------

// GenericFailure

// int32 code = 1;
inline void GenericFailure::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 GenericFailure::code() const {
  // @@protoc_insertion_point(field_get:GenericFailure.code)
  return code_;
}
inline void GenericFailure::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:GenericFailure.code)
}

// string message = 2;
inline void GenericFailure::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenericFailure::message() const {
  // @@protoc_insertion_point(field_get:GenericFailure.message)
  return message_.GetNoArena();
}
inline void GenericFailure::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GenericFailure.message)
}
#if LANG_CXX11
inline void GenericFailure::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GenericFailure.message)
}
#endif
inline void GenericFailure::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GenericFailure.message)
}
inline void GenericFailure::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GenericFailure.message)
}
inline ::std::string* GenericFailure::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:GenericFailure.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenericFailure::release_message() {
  // @@protoc_insertion_point(field_release:GenericFailure.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenericFailure::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:GenericFailure.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_bledata_2eproto
